<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.67"/>
    <errors>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ac&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ac&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\account.c" line="266"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ac&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ac&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\account.c" line="284"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ac&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ac&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\account.c" line="310"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ac&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ac&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\account.c" line="327"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old_prefix&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old_prefix&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\account.c" line="453"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;new_prefix&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;new_prefix&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\account.c" line="453"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ap&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ap&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\account.c" line="501"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ap&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ap&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\account.c" line="515"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\account.c" line="897"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\account.c" line="897"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\account.c" line="1063"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\account.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\account.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;existing_name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;existing_name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\action.c" line="490"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;menu_item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;menu_item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\action.c" line="514"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;action_name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;action_name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\action.c" line="548"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child_info&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child_info&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\action.c" line="1056"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child_info&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child_info&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\action.c" line="1074"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child_info&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child_info&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\action.c" line="1232"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;send_button&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;send_button&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\action.c" line="1266"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: q" verbose="Unused variable: q">
            <location file="src\action.c" line="375"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;escape_ch&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;escape_ch&amp;#039; is assigned a value that is never used.">
            <location file="src\action.c" line="376"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;GDK_WINDOWING_X11&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;GDK_WINDOWING_X11&amp;#039; was not checked because its code equals another one.">
            <location file="src\action.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\action.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_WAIT_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_WAIT_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\action.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\action.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ce&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ce&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addr_compl.c" line="592"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addr_compl.c" line="671"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;address&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;address&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addr_compl.c" line="1069"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;address&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;address&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addr_compl.c" line="1105"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;new&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;new&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addr_compl.c" line="1399"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;searchTerm&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;searchTerm&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addr_compl.c" line="1533"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: depth" verbose="Unused variable: depth">
            <location file="src\addr_compl.c" line="944"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: depth" verbose="Unused variable: depth">
            <location file="src\addr_compl.c" line="1449"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addr_compl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addr_compl.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\addrbook.c" line="1376"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\addrbook.c" line="1377"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="364"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="364"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="428"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="428"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="491"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="491"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="541"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="541"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="602"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="602"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="640"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="640"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="692"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="692"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="737"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrbook.c" line="737"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrbook.c" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\addrcache.c" line="398"/>
            <location file="src\addrcache.c" line="404"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\addrcache.c" line="416"/>
            <location file="src\addrcache.c" line="422"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\addrcache.c" line="434"/>
            <location file="src\addrcache.c" line="440"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\addrcache.c" line="453"/>
            <location file="src\addrcache.c" line="458"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\addrcache.c" line="471"/>
            <location file="src\addrcache.c" line="477"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\addrcache.c" line="490"/>
            <location file="src\addrcache.c" line="495"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\addrcache.c" line="522"/>
            <location file="src\addrcache.c" line="527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;uidH&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;uidH&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrcache.c" line="608"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;obj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;obj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrcache.c" line="647"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;obj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;obj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrcache.c" line="676"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;obj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;obj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrcache.c" line="719"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;uid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;uid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrcache.c" line="720"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;obj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;obj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrcache.c" line="897"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;obj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;obj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrcache.c" line="951"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;folderGroup&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;folderGroup&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\addrclip.c" line="642"/>
            <location file="src\addrclip.c" line="644"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrclip.c" line="77"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aio&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aio&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrclip.c" line="155"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cache&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cache&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrclip.c" line="156"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;attrib&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;attrib&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrclip.c" line="225"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;newAttrib&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;newAttrib&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrclip.c" line="226"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;em&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;em&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrclip.c" line="228"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;emailOrig&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;emailOrig&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrclip.c" line="322"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;emailCopy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;emailCopy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrclip.c" line="322"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;newGroup&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;newGroup&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrclip.c" line="356"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;newFolder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;newFolder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrclip.c" line="469"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrclip.c" line="554"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cacheFrom&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cacheFrom&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrclip.c" line="556"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrclip.c" line="610"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrclip.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrclip.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrcustomattr.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrcustomattr.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrduplicates.c" line="261"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old_val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old_val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrduplicates.c" line="263"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrduplicates.c" line="265"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vpaned&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vpaned&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrduplicates.c" line="307"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: ds - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: ds - otherwise it is redundant to check it against null.">
            <location file="src\addrduplicates.c" line="840"/>
            <location file="src\addrduplicates.c" line="856"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: ds - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: ds - otherwise it is redundant to check it against null.">
            <location file="src\addrduplicates.c" line="848"/>
            <location file="src\addrduplicates.c" line="856"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrduplicates.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrduplicates.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrduplicates.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrduplicates.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressadd.c" line="319"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressadd.c" line="321"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressadd.c" line="322"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressadd.c" line="323"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;person&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;person&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressadd.c" line="423"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressadd.c" line="425"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addressadd.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addressadd.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one.">
            <location file="src\addressadd.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressadd.c" line="396"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressadd.c" line="397"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: data - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: data - otherwise it is redundant to check it against null.">
            <location file="src\addressbook-dbus.c" line="392"/>
            <location file="src\addressbook-dbus.c" line="392"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;email_member&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;email_member&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook-dbus.c" line="99"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;compose&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;compose&amp;#039; is assigned a value that is never used.">
            <location file="src\addressbook-dbus.c" line="462"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addressbook-dbus.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addressbook-dbus.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\addressbook.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="725"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="725"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hbox&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hbox&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="752"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="752"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="1370"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="1371"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aio&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aio&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="1717"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;atci&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;atci&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="1807"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ds&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ds&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="1895"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rootFolder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rootFolder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="1896"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="1897"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;listAddress&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;listAddress&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="2360"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;abf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;abf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="2800"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="3292"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="3324"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;parent&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;parent&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="3337"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="3337"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cutItem&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cutItem&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="3772"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cache&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cache&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="3773"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ao&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ao&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="3820"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ds&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ds&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="3848"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;atci&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;atci&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="3962"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="3965"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;adapter&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;adapter&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="4298"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aqo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aqo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="4548"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;path&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;path&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5142"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fName&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fName&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5195"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5196"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ds&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ds&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5342"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ads&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ads&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5343"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;abf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;abf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5344"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ds&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ds&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5379"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ads&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ads&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5380"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;abf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;abf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5381"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ds&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ds&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5416"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ads&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ads&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5417"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;abf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;abf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5418"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ds&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ds&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5458"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ads&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ads&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5459"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;adapter&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;adapter&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5461"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;newNode&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;newNode&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5462"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="5707"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;canBrowse&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;canBrowse&amp;#039; is assigned a value that is never used.">
            <location file="src\addressbook.c" line="2064"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: ds - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: ds - otherwise it is redundant to check it against null.">
            <location file="src\addressbook.c" line="1431"/>
            <location file="src\addressbook.c" line="1564"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: ds - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: ds - otherwise it is redundant to check it against null.">
            <location file="src\addressbook.c" line="1452"/>
            <location file="src\addressbook.c" line="1564"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: person - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: person - otherwise it is redundant to check it against null.">
            <location file="src\addressbook.c" line="3586"/>
            <location file="src\addressbook.c" line="3603"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;email&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;email&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook.c" line="4676"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addressbook.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBPISOCK_PI_ADDRESS_H;USE_JPILOT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBPISOCK_PI_ADDRESS_H;USE_JPILOT&amp;#039; was not checked because its code equals another one.">
            <location file="src\addressbook.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addressbook.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook_foldersel.c" line="241"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook_foldersel.c" line="243"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addressbook_foldersel.c" line="245"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addressbook_foldersel.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addressbook_foldersel.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrgather.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrgather.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrgather.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrgather.c" line="334"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;ep&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;ep&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\addrharvest.c" line="504"/>
            <location file="src\addrharvest.c" line="505"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrharvest.c" line="110"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folderName&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folderName&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrharvest.c" line="325"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrharvest.c" line="328"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrharvest.c" line="484"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;email&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;email&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrharvest.c" line="545"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hdr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hdr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrharvest.c" line="609"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nhdr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nhdr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrharvest.c" line="609"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrharvest.c" line="663"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;list&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;list&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrharvest.c" line="708"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;num&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;num&amp;#039; is assigned a value that is never used.">
            <location file="src\addrharvest.c" line="789"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;r&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;r&amp;#039; is assigned a value that is never used.">
            <location file="src\addrharvest.c" line="795"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrharvest.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrharvest.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrharvest.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrharvest.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrharvest.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_NEW_ADDRBOOK&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_NEW_ADDRBOOK&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrharvest.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrharvest.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\addrindex.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\addrindex.c" line="752"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cache&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cache&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="518"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="995"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nv&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nv&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="996"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="1000"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="1001"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xtag&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xtag&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="1575"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;element&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;element&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="1920"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="1969"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="1970"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xtag&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xtag&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="2191"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ds&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ds&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="2575"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aqo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aqo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="2630"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sName&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sName&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="2835"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nodeDS&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nodeDS&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="2909"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sName&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sName&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="2929"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur_bname&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur_bname&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="3021"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;flg&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;flg&amp;#039; is assigned a value that is never used.">
            <location file="src\addrindex.c" line="2337"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;type&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;type&amp;#039; is assigned a value that is never used.">
            <location file="src\addrindex.c" line="2593"/>
        </error>
        <error id="unusedAllocatedMemory" severity="style" msg="Variable &amp;#039;name&amp;#039; is allocated memory that is never used." verbose="Variable &amp;#039;name&amp;#039; is allocated memory that is never used.">
            <location file="src\addrindex.c" line="2679"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;aqo&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;aqo&amp;#039; is assigned a value that is never used.">
            <location file="src\addrindex.c" line="2725"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xtag&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xtag&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrindex.c" line="1274"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrindex.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBPISOCK_PI_ADDRESS_H;USE_JPILOT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBPISOCK_PI_ADDRESS_H;USE_JPILOT&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrindex.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrindex.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_JPILOT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_JPILOT&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrindex.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\addritem.c" line="389"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;person&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;person&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addritem.c" line="729"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addritem.c" line="730"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;person&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;person&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addritem.c" line="1111"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addritem.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;req&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;req&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrquery.c" line="166"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;req&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;req&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrquery.c" line="204"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrselect.c" line="274"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrselect.c" line="316"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\addrselect.c" line="350"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrselect.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\addrselect.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\advsearch.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\advsearch.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\alertpanel.c" line="182"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;disable_checkbtn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;disable_checkbtn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\alertpanel.c" line="241"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\alertpanel.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\alertpanel.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\alertpanel.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\autofaces.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\avatars.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\avatars.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one.">
            <location file="src\browseldap.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nvp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nvp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\browseldap.c" line="110"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\browseldap.c" line="310"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;text&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;text&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\browseldap.c" line="312"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\browseldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\browseldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\browseldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one.">
            <location file="src\browseldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\browseldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one.">
            <location file="src\browseldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one.">
            <location file="src\browseldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one.">
            <location file="src\browseldap.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\codeconv.c" line="749"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\codeconv.c" line="750"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;enc_str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;enc_str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\codeconv.c" line="1652"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;n_conv&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;n_conv&amp;#039; is assigned a value that is never used.">
            <location file="src\codeconv.c" line="955"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\codeconv.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LOCALE_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LOCALE_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\codeconv.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\codeconv.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\compose.c" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: msginfo_list - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: msginfo_list - otherwise it is redundant to check it against null.">
            <location file="src\compose.c" line="1954"/>
            <location file="src\compose.c" line="1966"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;reply_to_ml&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;reply_to_ml&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\compose.c" line="3278"/>
            <location file="src\compose.c" line="3284"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;default_reply_to&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;default_reply_to&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\compose.c" line="3279"/>
            <location file="src\compose.c" line="3286"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;action&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;action&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\compose.c" line="10827"/>
            <location file="src\compose.c" line="10829"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ainfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ainfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="1205"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msgfile&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msgfile&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="1939"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="2658"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="2921"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="3247"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="3247"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="5051"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;headerentry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;headerentry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="6264"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;headerentryname&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;headerentryname&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="6265"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;headername_trans&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;headername_trans&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="6325"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="6368"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;headername_trans&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;headername_trans&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="6608"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;out_codeset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;out_codeset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="6661"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;string&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;string&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="6825"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folderidentifier&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folderidentifier&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="7195"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;branch_path&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;branch_path&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="8241"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;menuitem&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;menuitem&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="8242"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;systemid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;systemid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="8248"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="8343"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;widget&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;widget&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="8379"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;group&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;group&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="8381"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;compose&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;compose&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="8419"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;compose&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;compose&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="8430"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;qmark&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;qmark&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="8483"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folderidentifier&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folderidentifier&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="9539"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="9544"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;attach_selection&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;attach_selection&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="9659"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="10186"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;parent&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;parent&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="10864"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="10865"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;quote&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;quote&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="11397"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="11587"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ac&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ac&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="11695"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;list&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;list&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="11696"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;cur_pos&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;cur_pos&amp;#039; is assigned a value that is never used.">
            <location file="src\compose.c" line="3547"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\compose.c" line="6771"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\compose.c" line="6830"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\compose.c" line="8052"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\compose.c" line="9043"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\compose.c" line="4863"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\compose.c" line="6222"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\compose.c" line="6388"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\compose.c" line="6422"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\compose.c" line="8082"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;edited&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;edited&amp;#039; is assigned a value that is never used.">
            <location file="src\compose.c" line="4748"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;menuitem&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;menuitem&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\compose.c" line="7340"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\compose.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_WAIT_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_WAIT_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\compose.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\compose.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\crash.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CRASH_DIALOG;SIGABRT&amp;#039; since the value of &amp;#039;SIGABRT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CRASH_DIALOG;SIGABRT&amp;#039; since the value of &amp;#039;SIGABRT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\crash.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;CRASH_DIALOG;SIGABRT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;CRASH_DIALOG;SIGABRT&amp;#039; was not checked because its code equals another one.">
            <location file="src\crash.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CRASH_DIALOG;SIGFPE&amp;#039; since the value of &amp;#039;SIGFPE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CRASH_DIALOG;SIGFPE&amp;#039; since the value of &amp;#039;SIGFPE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\crash.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;CRASH_DIALOG;SIGFPE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;CRASH_DIALOG;SIGFPE&amp;#039; was not checked because its code equals another one.">
            <location file="src\crash.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CRASH_DIALOG;SIGILL&amp;#039; since the value of &amp;#039;SIGILL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CRASH_DIALOG;SIGILL&amp;#039; since the value of &amp;#039;SIGILL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\crash.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;CRASH_DIALOG;SIGILL&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;CRASH_DIALOG;SIGILL&amp;#039; was not checked because its code equals another one.">
            <location file="src\crash.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CRASH_DIALOG;SIGSEGV&amp;#039; since the value of &amp;#039;SIGSEGV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CRASH_DIALOG;SIGSEGV&amp;#039; since the value of &amp;#039;SIGSEGV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\crash.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;CRASH_DIALOG;SIGSEGV&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;CRASH_DIALOG;SIGSEGV&amp;#039; was not checked because its code equals another one.">
            <location file="src\crash.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one.">
            <location file="src\crash.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\crash.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\crash.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;chdr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;chdr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\customheader.c" line="83"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\customheader.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\displayheader.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sTitle&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sTitle&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\editaddress.c" line="229"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;scalewidth&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;scalewidth&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\editaddress.c" line="780"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;scaleheight&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;scaleheight&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\editaddress.c" line="780"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editaddress.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editaddress.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one.">
            <location file="src\editaddress_other_attributes_ldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\editaddress_other_attributes_ldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editaddress_other_attributes_ldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\editaddress_other_attributes_ldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one.">
            <location file="src\editaddress_other_attributes_ldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editaddress_other_attributes_ldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one.">
            <location file="src\editaddress_other_attributes_ldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one.">
            <location file="src\editaddress_other_attributes_ldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one.">
            <location file="src\editaddress_other_attributes_ldap.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\editbook.c" line="266"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editbook.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editbook.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rrow&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rrow&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\editgroup.c" line="173"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editgroup.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editgroup.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one.">
            <location file="src\editjpilot.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\editjpilot.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editjpilot.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sFSFile&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sFSFile&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\editjpilot.c" line="154"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sUTF8File&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sUTF8File&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\editjpilot.c" line="198"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hlbox&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hlbox&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\editjpilot.c" line="222"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\editjpilot.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBPISOCK_PI_ADDRESS_H;USE_JPILOT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBPISOCK_PI_ADDRESS_H;USE_JPILOT&amp;#039; was not checked because its code equals another one.">
            <location file="src\editjpilot.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one.">
            <location file="src\editjpilot.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editjpilot.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one.">
            <location file="src\editjpilot.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_JPILOT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_JPILOT&amp;#039; was not checked because its code equals another one.">
            <location file="src\editjpilot.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one.">
            <location file="src\editjpilot.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pwd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pwd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\editldap.c" line="891"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ctl&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ctl&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\editldap.c" line="958"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap_basedn.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap_basedn.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap_basedn.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap_basedn.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap_basedn.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap_basedn.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap_basedn.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap_basedn.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one.">
            <location file="src\editldap_basedn.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\edittags.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\edittags.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sUTF8File&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sUTF8File&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\editvcard.c" line="105"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editvcard.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\editvcard.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\enriched.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reason&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reason&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\exphtmldlg.c" line="161"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;aval&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;aval&amp;#039; is assigned a value that is never used.">
            <location file="src\exphtmldlg.c" line="191"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\exphtmldlg.c" line="418"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\exphtmldlg.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\exphtmldlg.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reason&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reason&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\expldifdlg.c" line="163"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;aval&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;aval&amp;#039; is assigned a value that is never used.">
            <location file="src\expldifdlg.c" line="201"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\expldifdlg.c" line="466"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\expldifdlg.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\expldifdlg.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\export.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\export.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\export.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\exporthtml.c" line="166"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\exporthtml.c" line="521"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;listHeir&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;listHeir&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\exporthtml.c" line="875"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\exporthtml.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\exporthtml.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one.">
            <location file="src\exporthtml.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;attr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;attr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\exportldif.c" line="340"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\exportldif.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ts&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ts&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\file_checker.c" line="58"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\file_checker.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\filtering.c" line="758"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\filtering.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\filtering.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sort_key_str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sort_key_str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="657"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur_folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur_folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="774"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="864"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="1060"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="1104"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="1131"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="1231"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="1247"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="1334"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="1834"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="1876"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="1923"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="1998"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cache_file&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cache_file&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="2630"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mark_file&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mark_file&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="2630"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tags_file&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tags_file&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="2630"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="2649"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="2872"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="2913"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="4217"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="4359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folder.c" line="4361"/>
        </error>
        <error id="unusedAllocatedMemory" severity="style" msg="Variable &amp;#039;buf&amp;#039; is allocated memory that is never used." verbose="Variable &amp;#039;buf&amp;#039; is allocated memory that is never used.">
            <location file="src\folder.c" line="2010"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\folder.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\folder.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\folder.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\folder.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\folder_item_prefs.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\foldersel.c" line="491"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\foldersel.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\foldersel.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderutils.c" line="126"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderutils.c" line="126"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\folderutils.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\folderutils.c" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: item - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: item - otherwise it is redundant to check it against null.">
            <location file="src\folderview.c" line="2983"/>
            <location file="src\folderview.c" line="2993"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="407"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="815"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="886"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folderview&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folderview&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="1067"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ctree&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ctree&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="1068"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folderview&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folderview&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="1638"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ctree&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ctree&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="1639"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="1640"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="1703"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;parent&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;parent&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="1720"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sibling&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sibling&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="1720"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="2715"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="2716"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;source&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;source&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="2717"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dist&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dist&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="2817"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;info&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;info&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\folderview.c" line="2929"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\folderview.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\folderview.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\folderview.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\grouplistdialog.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\grouplistdialog.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\headerview.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\headerview.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\html.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hadj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hadj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\image_viewer.c" line="182"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vadj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vadj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\image_viewer.c" line="182"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\image_viewer.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\image_viewer.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\imap.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\imap.c" line="6192"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one.">
            <location file="src\imap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_UNIX&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_UNIX&amp;#039; was not checked because its code equals another one.">
            <location file="src\imap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\imap.c" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: cached - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: cached - otherwise it is redundant to check it against null.">
            <location file="src\imap.c" line="1631"/>
            <location file="src\imap.c" line="1632"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: old_item - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: old_item - otherwise it is redundant to check it against null.">
            <location file="src\imap.c" line="2740"/>
            <location file="src\imap.c" line="2736"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ext_info&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ext_info&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\imap.c" line="884"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ht_data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ht_data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\imap.c" line="1382"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fileinfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fileinfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\imap.c" line="1684"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dirpath&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dirpath&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\imap.c" line="3239"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;new_cache_dir&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;new_cache_dir&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\imap.c" line="3245"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;path&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;path&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\imap.c" line="3340"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;iter&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;iter&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\imap.c" line="3915"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ht_data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ht_data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\imap.c" line="4849"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\imap.c" line="5553"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;iter&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;iter&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\imap.c" line="5590"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;iter&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;iter&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\imap.c" line="5744"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ok&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ok&amp;#039; is assigned a value that is never used.">
            <location file="src\imap.c" line="1799"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ok&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ok&amp;#039; is assigned a value that is never used.">
            <location file="src\imap.c" line="4034"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBETPAN&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBETPAN&amp;#039; was not checked because its code equals another one.">
            <location file="src\imap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_NETWORKMANAGER_SUPPORT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_NETWORKMANAGER_SUPPORT&amp;#039; was not checked because its code equals another one.">
            <location file="src\imap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\imap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\imap_gtk.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\imap_gtk.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\imap_gtk.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\import.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\import.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\import.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rec&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rec&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\importldif.c" line="327"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\importldif.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\importldif.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\importmutt.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\importmutt.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\importpine.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\importpine.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;inc_dialog&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;inc_dialog&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\inc.c" line="316"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;session&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;session&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\inc.c" line="368"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;total_size_str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;total_size_str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\inc.c" line="973"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;msgnum&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;msgnum&amp;#039; is assigned a value that is never used.">
            <location file="src\inc.c" line="1138"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\inc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\inc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\jpilot.c" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\jpilot.c" line="355"/>
            <location file="src\jpilot.c" line="360"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\jpilot.c" line="772"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\jpilot.c" line="773"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rec_size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rec_size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\jpilot.c" line="773"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fpos&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fpos&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\jpilot.c" line="775"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;email&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;email&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\jpilot.c" line="1054"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\jpilot.c" line="1055"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;br&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;br&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\jpilot.c" line="1231"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;br&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;br&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\jpilot.c" line="1460"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\jpilot.c" line="1634"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;p&amp;#039; is assigned a value that is never used.">
            <location file="src\jpilot.c" line="675"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBPISOCK_PI_ARGS_H;USE_JPILOT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBPISOCK_PI_ARGS_H;USE_JPILOT&amp;#039; was not checked because its code equals another one.">
            <location file="src\jpilot.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_JPILOT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_JPILOT&amp;#039; was not checked because its code equals another one.">
            <location file="src\jpilot.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapctrl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapctrl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapctrl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapctrl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapctrl.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapctrl.c" line="194"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;first&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;first&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapctrl.c" line="852"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;second&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;second&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapctrl.c" line="852"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapctrl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapctrl.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;server&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;server&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldaplocate.c" line="93"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;qry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;qry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldaplocate.c" line="127"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldaplocate.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldaplocate.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;email&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;email&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapquery.c" line="468"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;listEMail&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;listEMail&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapquery.c" line="772"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cache&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cache&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapquery.c" line="1062"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nvp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nvp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapquery.c" line="1137"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;listValues&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;listValues&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapquery.c" line="1195"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fullName&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fullName&amp;#039; is assigned a value that is never used.">
            <location file="src\ldapquery.c" line="570"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapquery.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapquery.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapquery.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapquery.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapquery.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapquery.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapquery.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_UNIX&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_UNIX&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapserver.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapserver.c" line="469"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;listEMail&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;listEMail&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapserver.c" line="528"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapserver.c" line="569"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pwd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pwd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapserver.c" line="762"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapserver.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32;LDAP_UNICODE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32;LDAP_UNICODE&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapserver.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapserver.c" line="0"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: rc" verbose="Unused variable: rc">
            <location file="src\ldapserver.c" line="721"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i">
            <location file="src\ldapserver.c" line="722"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;uri&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;uri&amp;#039; is assigned a value that is never used.">
            <location file="src\ldapserver.c" line="767"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\ldapupdate.c" line="142"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\ldapupdate.c" line="287"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\ldapupdate.c" line="342"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: param" verbose="Possible null pointer dereference: param">
            <location file="src\ldapupdate.c" line="1188"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: param" verbose="Possible null pointer dereference: param">
            <location file="src\ldapupdate.c" line="1221"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: NoRemove - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: NoRemove - otherwise it is redundant to check it against null.">
            <location file="src\ldapupdate.c" line="1261"/>
            <location file="src\ldapupdate.c" line="1292"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: param" verbose="Possible null pointer dereference: param">
            <location file="src\ldapupdate.c" line="1280"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapupdate.c" line="625"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;e&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;e&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapupdate.c" line="670"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vals&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vals&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapupdate.c" line="672"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapupdate.c" line="673"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;attribute&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;attribute&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapupdate.c" line="676"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldapupdate.c" line="677"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapupdate.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;OPEN_LDAP_API_AT_LEAST_3000&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;OPEN_LDAP_API_AT_LEAST_3000&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldapupdate.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_UNIX&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_UNIX&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldaputil.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;e&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;e&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldaputil.c" line="57"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;attribute&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;attribute&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldaputil.c" line="60"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vals&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vals&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldaputil.c" line="61"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;e&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;e&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldaputil.c" line="130"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;attribute&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;attribute&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldaputil.c" line="133"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vals&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vals&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldaputil.c" line="134"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_BACKTRACE;USE_LDAP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_BACKTRACE;USE_LDAP&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldaputil.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldaputil.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H;USE_LDAP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H;USE_LDAP&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldaputil.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H;USE_LDAP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H;USE_LDAP&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldaputil.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_LDAP&amp;#039; was not checked because its code equals another one.">
            <location file="src\ldaputil.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;email&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;email&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldif.c" line="395"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;attr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;attr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldif.c" line="496"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\ldif.c" line="497"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\localfolder.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\main.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\main.c" line="1720"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\main.c" line="2280"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\main.c" line="2328"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\main.c" line="2430"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;have_connectivity&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;have_connectivity&amp;#039; is assigned a value that is never used.">
            <location file="src\main.c" line="1648"/>
        </error>
        <error id="unusedAllocatedMemory" severity="style" msg="Variable &amp;#039;buf&amp;#039; is allocated memory that is never used." verbose="Variable &amp;#039;buf&amp;#039; is allocated memory that is never used.">
            <location file="src\main.c" line="2013"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;socket_dir&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;socket_dir&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\main.c" line="2139"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\main.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\main.c" line="870"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;unread&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;unread&amp;#039; is assigned a value that is never used.">
            <location file="src\main.c" line="879"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;total&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;total&amp;#039; is assigned a value that is never used.">
            <location file="src\main.c" line="877"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;have_connectivity&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;have_connectivity&amp;#039; is assigned a value that is never used.">
            <location file="src\main.c" line="1646"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_FLOCK&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_FLOCK&amp;#039; was not checked because its code equals another one.">
            <location file="src\main.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\mainwindow.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mainwindow.c" line="1068"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mainwin&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mainwin&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mainwindow.c" line="2298"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mainwin&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mainwin&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mainwindow.c" line="2433"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mainwin&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mainwin&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mainwindow.c" line="2444"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;menuitem&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;menuitem&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mainwindow.c" line="2456"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ac_prefs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ac_prefs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mainwindow.c" line="2457"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;accel_path&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;accel_path&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mainwindow.c" line="2459"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ac_prefs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ac_prefs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mainwindow.c" line="2490"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ac_prefs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ac_prefs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mainwindow.c" line="2534"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;menuitem&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;menuitem&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mainwindow.c" line="2568"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ac_prefs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ac_prefs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mainwindow.c" line="2569"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mainwin&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mainwin&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mainwindow.c" line="2599"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mainwin&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mainwin&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mainwindow.c" line="2614"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;action&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;action&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mainwindow.c" line="3854"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mainwindow.c" line="3855"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;color&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;color&amp;#039; is assigned a value that is never used.">
            <location file="src\mainwindow.c" line="2096"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i">
            <location file="src\mainwindow.c" line="1443"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;r&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;r&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\mainwindow.c" line="5090"/>
            <location file="src\mainwindow.c" line="5093"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\mainwindow.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\mainwindow.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;uri&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;uri&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\manual.c" line="93"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\manual.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LOCALE_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LOCALE_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\manual.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\manual.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\matcher.c" line="1220"/>
        </error>
        <error id="doubleFree" severity="error" msg="Memory pointed to by &amp;#039;matcher_parserin&amp;#039; is freed twice." verbose="Memory pointed to by &amp;#039;matcher_parserin&amp;#039; is freed twice.">
            <location file="src\matcher.c" line="2656"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\matcher.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\matcher.c" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;result&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;result&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\matcher.c" line="665"/>
            <location file="src\matcher.c" line="670"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\matcher_parser_lex.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\matcher_parser_lex.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YYSTYPE&amp;#039; since the value of &amp;#039;YYSTYPE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YYSTYPE&amp;#039; since the value of &amp;#039;YYSTYPE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\matcher_parser_lex.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YY_NO_UNISTD_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YY_NO_UNISTD_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\matcher_parser_lex.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YY_USER_INIT&amp;#039; since the value of &amp;#039;YY_USER_INIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YY_USER_INIT&amp;#039; since the value of &amp;#039;YY_USER_INIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\matcher_parser_lex.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YY_USER_INIT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YY_USER_INIT&amp;#039; was not checked because its code equals another one.">
            <location file="src\matcher_parser_lex.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__STDC_VERSION__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__STDC_VERSION__&amp;#039; was not checked because its code equals another one.">
            <location file="src\matcher_parser_lex.c" line="0"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;num_to_read&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;num_to_read&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file="matcher_parser_lex.c" line="1240"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\matcher_parser_parse.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\matcher_parser_parse.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YYENABLE_NLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YYENABLE_NLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\matcher_parser_parse.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YYTYPE_INT16&amp;#039; since the value of &amp;#039;YYTYPE_INT16&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YYTYPE_INT16&amp;#039; since the value of &amp;#039;YYTYPE_INT16&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\matcher_parser_parse.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YYTYPE_INT8&amp;#039; since the value of &amp;#039;YYTYPE_INT8&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YYTYPE_INT8&amp;#039; since the value of &amp;#039;YYTYPE_INT8&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\matcher_parser_parse.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YYTYPE_INT8&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YYTYPE_INT8&amp;#039; was not checked because its code equals another one.">
            <location file="src\matcher_parser_parse.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YYTYPE_UINT16&amp;#039; since the value of &amp;#039;YYTYPE_UINT16&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YYTYPE_UINT16&amp;#039; since the value of &amp;#039;YYTYPE_UINT16&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\matcher_parser_parse.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YYTYPE_UINT16&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YYTYPE_UINT16&amp;#039; was not checked because its code equals another one.">
            <location file="src\matcher_parser_parse.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YYTYPE_UINT8&amp;#039; since the value of &amp;#039;YYTYPE_UINT8&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YYTYPE_UINT8&amp;#039; since the value of &amp;#039;YYTYPE_UINT8&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\matcher_parser_parse.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YYTYPE_UINT8&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YYTYPE_UINT8&amp;#039; was not checked because its code equals another one.">
            <location file="src\matcher_parser_parse.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\matcher_parser_parse.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="matcher_parser_parse.c" line="1800"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="matcher_parser_parse.y" line="286"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\mbox.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mbox.c" line="96"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fcntled&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fcntled&amp;#039; is assigned a value that is never used.">
            <location file="src\mbox.c" line="433"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fcntled&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fcntled&amp;#039; is assigned a value that is never used.">
            <location file="src\mbox.c" line="362"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\mbox.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\message_search.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\message_search.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\messageview.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\messageview.c" line="1223"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\messageview.c" line="1250"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msgview&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msgview&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\messageview.c" line="1569"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;trash&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;trash&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\messageview.c" line="1653"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ac&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ac&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\messageview.c" line="1654"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\messageview.c" line="1820"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mainwin&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mainwin&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\messageview.c" line="2162"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;charset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;charset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\messageview.c" line="2671"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\messageview.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\messageview.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\messageview.c" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;need_scan&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;need_scan&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\mh.c" line="625"/>
            <location file="src\mh.c" line="634"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;last_mtime&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;last_mtime&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\mh.c" line="626"/>
            <location file="src\mh.c" line="635"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;need_scan&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;need_scan&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\mh.c" line="653"/>
            <location file="src\mh.c" line="663"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;last_mtime&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;last_mtime&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\mh.c" line="655"/>
            <location file="src\mh.c" line="664"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;last_mtime&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;last_mtime&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\mh.c" line="1415"/>
            <location file="src\mh.c" line="1417"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;destfile&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;destfile&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mh.c" line="416"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fileinfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fileinfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mh.c" line="418"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dir_name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dir_name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mh.c" line="1105"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mh_sequences_old_fp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mh_sequences_old_fp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mh.c" line="1320"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\mh.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\mh_gtk.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\mh_gtk.c" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;column&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;column&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\mimeview.c" line="300"/>
            <location file="src\mimeview.c" line="309"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;length&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;length&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mimeview.c" line="725"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;first_text&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;first_text&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mimeview.c" line="1366"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;selection&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;selection&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mimeview.c" line="1471"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;headers&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;headers&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mimeview.c" line="1693"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;attach_file&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;attach_file&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mimeview.c" line="2161"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ainfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ainfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mimeview.c" line="2162"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mimeview.c" line="2201"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;viewer_list&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;viewer_list&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mimeview.c" line="2255"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_APACHE_FNMATCH&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_APACHE_FNMATCH&amp;#039; was not checked because its code equals another one.">
            <location file="src\mimeview.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\mimeview.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\mimeview.c" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;defer&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;defer&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\mimeview.c" line="527"/>
            <location file="src\mimeview.c" line="529"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." verbose="Suspicious condition (assignment + comparison); Clarify expression with parentheses.">
            <location file="src\msgcache.c" line="472"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." verbose="Suspicious condition (assignment + comparison); Clarify expression with parentheses.">
            <location file="src\msgcache.c" line="480"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;wrote&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;wrote&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\msgcache.c" line="1111"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;data_ver&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;data_ver&amp;#039; is assigned a value that is never used.">
            <location file="src\msgcache.c" line="442"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;wrote&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;wrote&amp;#039; is assigned a value that is never used.">
            <location file="src\msgcache.c" line="420"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;wrote&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;wrote&amp;#039; is assigned a value that is never used.">
            <location file="src\msgcache.c" line="1136"/>
        </error>
        <error id="doubleFree" severity="error" msg="Memory pointed to by &amp;#039;conv&amp;#039; is freed twice." verbose="Memory pointed to by &amp;#039;conv&amp;#039; is freed twice.">
            <location file="src\msgcache.c" line="780"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\msgcache.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\msgcache.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mutt.c" line="137"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pAddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pAddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mutt.c" line="204"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rec&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rec&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mutt.c" line="373"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;line&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;line&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\mutt.c" line="453"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one.">
            <location file="src\news.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\news.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\news.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\news.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\news.c" line="646"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\news.c" line="1209"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\news.c" line="721"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one.">
            <location file="src\news.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_NETWORKMANAGER_SUPPORT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_NETWORKMANAGER_SUPPORT&amp;#039; was not checked because its code equals another one.">
            <location file="src\news.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\news.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one.">
            <location file="src\news.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\news.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one.">
            <location file="src\news.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\news_gtk.c" line="137"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\news_gtk.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\news_gtk.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\news_gtk.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\noticeview.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\noticeview.c" line="0"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c">
            <location file="src\partial_download.c" line="115"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\partial_download.c" line="115"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c">
            <location file="src\partial_download.c" line="117"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c">
            <location file="src\partial_download.c" line="207"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\partial_download.c" line="207"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c">
            <location file="src\partial_download.c" line="209"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c">
            <location file="src\partial_download.c" line="420"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\partial_download.c" line="420"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c">
            <location file="src\partial_download.c" line="422"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\partial_download.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\partial_download.c" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;flagProc&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;flagProc&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\pine.c" line="527"/>
            <location file="src\pine.c" line="537"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\pine.c" line="140"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\pine.c" line="387"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nodeAddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nodeAddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\pine.c" line="477"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nodeName&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nodeName&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\pine.c" line="477"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;group&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;group&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\pine.c" line="478"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;email&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;email&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\pine.c" line="479"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\pop.c" line="189"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\pop.c" line="216"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\pop.c" line="261"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\pop.c" line="329"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c">
            <location file="src\pop.c" line="629"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\pop.c" line="629"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c">
            <location file="src\pop.c" line="630"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\pop.c" line="630"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c">
            <location file="src\pop.c" line="631"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\pop.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\prefs_account.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;new_id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;new_id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_account.c" line="2864"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_account.c" line="3491"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_account.c" line="3802"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_account.c" line="4048"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\prefs_account.c" line="1022"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\prefs_account.c" line="1412"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_account.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_account.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msgview&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msgview&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_actions.c" line="925"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;compose&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;compose&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_actions.c" line="926"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tokens&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tokens&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_actions.c" line="1347"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;action_str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;action_str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_actions.c" line="1347"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;action_name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;action_name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_actions.c" line="1376"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;action_p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;action_p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_actions.c" line="1376"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_actions.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_actions.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_actions.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\prefs_common.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;out&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;out&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_common.c" line="1459"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;out&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;out&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_common.c" line="1481"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_common.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_common.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_common.c" line="0"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\prefs_compose_writing.c" line="118"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_compose_writing.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_compose_writing.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;preview&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;preview&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_customheader.c" line="894"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pixbuf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pixbuf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_customheader.c" line="895"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_customheader.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_customheader.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_display_header.c" line="169"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_display_header.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_display_header.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_ext_prog.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_ext_prog.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cond_str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cond_str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_filtering.c" line="848"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_filtering.c" line="1467"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;filtering_str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;filtering_str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_filtering.c" line="1468"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\prefs_filtering.c" line="260"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_filtering.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_filtering.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_filtering.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_filtering_action.c" line="723"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: menu" verbose="Unused variable: menu">
            <location file="src\prefs_filtering_action.c" line="1540"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_filtering_action.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_filtering_action.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_filtering_action.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_folder_column.c" line="390"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_folder_column.c" line="404"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_folder_column.c" line="405"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_folder_column.c" line="804"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;selection&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;selection&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_folder_column.c" line="931"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;selection&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;selection&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_folder_column.c" line="949"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_folder_column.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_folder_column.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_folder_column.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_folder_item.c" line="668"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;text&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;text&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_folder_item.c" line="815"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ac_prefs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ac_prefs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_folder_item.c" line="857"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;no_save_warning&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;no_save_warning&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_folder_item.c" line="1387"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\prefs_folder_item.c" line="218"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\prefs_folder_item.c" line="836"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;red&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;red&amp;#039; is assigned a value that is never used.">
            <location file="src\prefs_folder_item.c" line="1729"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_folder_item.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_folder_item.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_fonts.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_fonts.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bufp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bufp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_gtk.c" line="817"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\prefs_gtk.c" line="830"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tmp" verbose="Uninitialized variable: tmp">
            <location file="src\prefs_gtk.c" line="777"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_gtk.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_gtk.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_image_viewer.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_image_viewer.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_image_viewer.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_image_viewer.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_image_viewer.c" line="0"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\prefs_logging.c" line="123"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_logging.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_logging.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_matcher.c" line="982"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;matcherprop&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;matcherprop&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_matcher.c" line="2094"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_matcher.c" line="2095"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_matcher.c" line="2097"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;model&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;model&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_matcher.c" line="2099"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\prefs_matcher.c" line="327"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\prefs_matcher.c" line="552"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: menu" verbose="Unused variable: menu">
            <location file="src\prefs_matcher.c" line="2409"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_matcher.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_matcher.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_matcher.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_message.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_message.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_msg_colors.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_msg_colors.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_other.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_other.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_quote.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_quote.c" line="0"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\prefs_receive.c" line="113"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_receive.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_receive.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_receive.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_send.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_send.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_spelling.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_spelling.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_spelling.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_spelling.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_spelling.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_spelling.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_spelling.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_spelling.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_spelling.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_summaries.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_summaries.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_summary_column.c" line="405"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_summary_column.c" line="419"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_summary_column.c" line="420"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_summary_column.c" line="819"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;selection&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;selection&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_summary_column.c" line="946"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;selection&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;selection&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_summary_column.c" line="964"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_summary_column.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_summary_column.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_summary_column.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_summary_open.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_summary_open.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmpl&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmpl&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_template.c" line="480"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_template.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_template.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_template.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;finfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;finfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_themes.c" line="712"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sinfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sinfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_themes.c" line="713"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_themes.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_themes.c" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;action&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;action&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\prefs_toolbar.c" line="854"/>
            <location file="src\prefs_toolbar.c" line="855"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;act&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;act&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_toolbar.c" line="381"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;act_p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;act_p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\prefs_toolbar.c" line="475"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\prefs_toolbar.c" line="883"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_toolbar.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_toolbar.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_wrapping.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\prefs_wrapping.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;attr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;attr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\printing.c" line="943"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;line&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;line&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\printing.c" line="1093"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;attr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;attr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\printing.c" line="1094"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;baseline&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;baseline&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\printing.c" line="1095"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;notlast&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;notlast&amp;#039; is assigned a value that is never used.">
            <location file="src\printing.c" line="1143"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\printing.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\printing.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\privacy.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;header&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;header&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procheader.c" line="198"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;header&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;header&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procheader.c" line="215"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procheader.c" line="315"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;default_format&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;default_format&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procheader.c" line="985"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procheader.c" line="986"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;src_codeset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;src_codeset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procheader.c" line="987"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dest_codeset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dest_codeset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procheader.c" line="987"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\procheader.c" line="799"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\procheader.c" line="804"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\procheader.c" line="808"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\procheader.c" line="813"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\procheader.c" line="817"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\procheader.c" line="822"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\procheader.c" line="826"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\procheader.c" line="831"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\procheader.c" line="835"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\procheader.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\procheader.c" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: boundary - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: boundary - otherwise it is redundant to check it against null.">
            <location file="src\procmime.c" line="1660"/>
            <location file="src\procmime.c" line="1680"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mime_type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mime_type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procmime.c" line="1154"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procmime.c" line="1191"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;delim&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;delim&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procmime.c" line="1192"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;infp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;infp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procmime.c" line="2638"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procmime.c" line="2639"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;result&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;result&amp;#039; is assigned a value that is never used.">
            <location file="src\procmime.c" line="1717"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: tmp_fp" verbose="Resource leak: tmp_fp">
            <location file="src\procmime.c" line="636"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\procmime.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LOCALE_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LOCALE_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\procmime.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\procmime.c" line="0"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;&amp;amp;&amp;amp;&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="src\procmsg.c" line="278"/>
            <location file="src\procmsg.c" line="278"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procmsg.c" line="83"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msgid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msgid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procmsg.c" line="214"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fileinfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fileinfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procmsg.c" line="449"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fileinfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fileinfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procmsg.c" line="476"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;trash&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;trash&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procmsg.c" line="717"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;file&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;file&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procmsg.c" line="1000"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;content&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;content&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procmsg.c" line="1672"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procmsg.c" line="1751"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procmsg.c" line="2144"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\procmsg.c" line="2242"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\procmsg.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\procmsg.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\procmsg.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hbox2_format&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hbox2_format&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\quote_fmt.c" line="151"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hbox3&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hbox3&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\quote_fmt.c" line="277"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hbox3&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hbox3&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\quote_fmt.c" line="407"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\quote_fmt.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\quote_fmt.c" line="0"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;num_to_read&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;num_to_read&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file="quote_fmt_lex.c" line="1734"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;new_size&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;new_size&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file="quote_fmt_lex.c" line="1747"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YY_NO_UNISTD_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YY_NO_UNISTD_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\quote_fmt_lex.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YY_USER_INIT&amp;#039; since the value of &amp;#039;YY_USER_INIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YY_USER_INIT&amp;#039; since the value of &amp;#039;YY_USER_INIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\quote_fmt_lex.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__STDC_VERSION__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__STDC_VERSION__&amp;#039; was not checked because its code equals another one.">
            <location file="src\quote_fmt_lex.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\quote_fmt_parse.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\quote_fmt_parse.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YYENABLE_NLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YYENABLE_NLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\quote_fmt_parse.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YYTYPE_INT16&amp;#039; since the value of &amp;#039;YYTYPE_INT16&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YYTYPE_INT16&amp;#039; since the value of &amp;#039;YYTYPE_INT16&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\quote_fmt_parse.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YYTYPE_INT8&amp;#039; since the value of &amp;#039;YYTYPE_INT8&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YYTYPE_INT8&amp;#039; since the value of &amp;#039;YYTYPE_INT8&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\quote_fmt_parse.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YYTYPE_INT8&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YYTYPE_INT8&amp;#039; was not checked because its code equals another one.">
            <location file="src\quote_fmt_parse.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YYTYPE_UINT16&amp;#039; since the value of &amp;#039;YYTYPE_UINT16&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YYTYPE_UINT16&amp;#039; since the value of &amp;#039;YYTYPE_UINT16&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\quote_fmt_parse.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YYTYPE_UINT16&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YYTYPE_UINT16&amp;#039; was not checked because its code equals another one.">
            <location file="src\quote_fmt_parse.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YYTYPE_UINT8&amp;#039; since the value of &amp;#039;YYTYPE_UINT8&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YYTYPE_UINT8&amp;#039; since the value of &amp;#039;YYTYPE_UINT8&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\quote_fmt_parse.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YYTYPE_UINT8&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YYTYPE_UINT8&amp;#039; was not checked because its code equals another one.">
            <location file="src\quote_fmt_parse.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\quote_fmt_parse.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="quote_fmt_parse.c" line="1880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="quote_fmt_parse.y" line="256"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;perc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;perc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="quote_fmt_parse.y" line="279"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="quote_fmt_parse.y" line="280"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="quote_fmt_parse.y" line="281"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="quote_fmt_parse.y" line="365"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="quote_fmt_parse.y" line="476"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="quote_fmt_parse.y" line="490"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="quote_fmt_parse.y" line="502"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="quote_fmt_parse.y" line="534"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;count&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;count&amp;#039; is assigned a value that is never used.">
            <location file="quote_fmt_parse.y" line="557"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="quote_fmt_parse.y" line="345"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="quote_fmt_parse.y" line="352"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="quote_fmt_parse.y" line="373"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;%&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a%b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a%b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a%(b?c:d)&amp;#039;&amp;#039;.">
            <location file="quote_fmt_parse.y" line="292"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\recv.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\recv.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\remotefolder.c" line="0"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: status" verbose="Unused variable: status">
            <location file="src\send_message.c" line="147"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\send_message.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\send_message.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\setup.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\setup.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_DRIVE_LETTERS;USE_SIMPLE_GETTEXT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_DRIVE_LETTERS;USE_SIMPLE_GETTEXT&amp;#039; was not checked because its code equals another one.">
            <location file="src\simple-gettext.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_SIMPLE_GETTEXT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_SIMPLE_GETTEXT&amp;#039; was not checked because its code equals another one.">
            <location file="src\simple-gettext.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\simple-gettext.c" line="118"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\sourcewindow.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\sourcewindow.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;GENERIC_UMPC&amp;#039; was not checked because its code equals another one.">
            <location file="src\ssl_manager.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\ssl_manager.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\ssl_manager.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\ssl_manager.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBSM&amp;#039; was not checked because its code equals another one.">
            <location file="src\ssl_manager.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\ssl_manager.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one.">
            <location file="src\ssl_manager.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\ssl_manager.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__cplusplus&amp;#039; was not checked because its code equals another one.">
            <location file="src\ssl_manager.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\statusbar.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\statusbar.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\stock_pixmap.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\stock_pixmap.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;from_str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;from_str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summary_search.c" line="591"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;to_str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;to_str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summary_search.c" line="591"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;subject_str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;subject_str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summary_search.c" line="591"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;body_str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;body_str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summary_search.c" line="592"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;matchers&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;matchers&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summary_search.c" line="593"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\summary_search.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\summary_search.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\summaryview.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="1127"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="1705"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="2296"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="2316"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="2339"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="2364"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="2392"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;src_msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;src_msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="2436"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="2522"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tooltip&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tooltip&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="2557"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ssize&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ssize&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="2695"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tsize&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tsize&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="2695"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="2729"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="3239"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tags_text&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tags_text&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="3269"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="3664"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="3786"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="4115"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aval&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aval&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="4372"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="4373"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="4746"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;parent&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;parent&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="5330"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tags_str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tags_str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="5855"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="6101"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="6408"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msgview&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msgview&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="6895"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="7204"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="7904"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\summaryview.c" line="7989"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;count&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;count&amp;#039; is assigned a value that is never used.">
            <location file="src\summaryview.c" line="3253"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;total&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;total&amp;#039; is assigned a value that is never used.">
            <location file="src\summaryview.c" line="8028"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp3&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp3&amp;#039; is assigned a value that is never used.">
            <location file="src\summaryview.c" line="3267"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\summaryview.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\summaryview.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\summaryview.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\textview.c" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;rc&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;rc&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\textview.c" line="1125"/>
            <location file="src\textview.c" line="1126"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;headers&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;headers&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\textview.c" line="663"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;content_type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;content_type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\textview.c" line="939"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;header&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;header&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\textview.c" line="2209"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\textview.c" line="1382"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\textview.c" line="1502"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: shortcut" verbose="Unused variable: shortcut">
            <location file="src\textview.c" line="939"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ui_manager&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ui_manager&amp;#039; is assigned a value that is never used.">
            <location file="src\textview.c" line="947"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: p" verbose="Unused variable: p">
            <location file="src\textview.c" line="1034"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: cmd" verbose="Unused variable: cmd">
            <location file="src\textview.c" line="1034"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\textview.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_WAIT_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_WAIT_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\textview.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\textview.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\toolbar.c" line="357"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\toolbar.c" line="357"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\toolbar.c" line="853"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\toolbar.c" line="2219"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;action&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;action&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\toolbar.c" line="2220"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\toolbar.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\toolbar.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\toolbar.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;undo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;undo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\undo.c" line="150"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;last_undo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;last_undo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\undo.c" line="183"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\undo.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\undo.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;encoding_begin_p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;encoding_begin_p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\unmime.c" line="41"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;text_begin_p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;text_begin_p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\unmime.c" line="41"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\unmime.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\uri_opener.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\uri_opener.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tagname&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tagname&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\vcard.c" line="624"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tagvalue&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tagvalue&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\vcard.c" line="624"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tagtype&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tagtype&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\vcard.c" line="624"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;line&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;line&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\vcard.c" line="624"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\vcard.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\wizard.c" line="410"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\wizard.c" line="411"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\wizard.c" line="412"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\wizard.c" line="413"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\wizard.c" line="414"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\wizard.c" line="415"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\wizard.c" line="416"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\wizard.c" line="417"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\wizard.c" line="418"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\wizard.c" line="419"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\wizard.c" line="420"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\wizard.c" line="421"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\wizard.c" line="422"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;text&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;text&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\wizard.c" line="1223"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\wizard.c" line="1457"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\wizard.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\wizard.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\base64.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\base64.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\base64.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\base64.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\common\claws.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\claws.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\claws.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LOCALE_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LOCALE_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\claws.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_NETDB_H;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_NETDB_H;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\claws.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\claws.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\claws.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\claws.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\fnmatch.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\fnmatch.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;WIN32;_XOPEN_SOURCE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;WIN32;_XOPEN_SOURCE&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\fnmatch.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;WIN32;const&amp;#039; since the value of &amp;#039;const&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;WIN32;const&amp;#039; since the value of &amp;#039;const&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\common\fnmatch.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\hooks.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\hooks.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\hooks.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\log.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\log.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\log.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\log.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\log.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\log.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_PATH_MAILDIR&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_PATH_MAILDIR&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\log.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\md5.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\md5.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\md5.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\md5.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\md5.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pFound&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pFound&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\mgutils.c" line="192"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\mgutils.c" line="353"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\mgutils.c" line="377"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\passcrypt.c" line="149"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\common\plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_PATH_MAILDIR&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_PATH_MAILDIR&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\prefs.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\prefs.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\prefs.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\prefs.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\prefs.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_PATH_MAILDIR&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_PATH_MAILDIR&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\prefs.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\quoted-printable.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\quoted-printable.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\quoted-printable.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\quoted-printable.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\quoted-printable.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\common\session.c" line="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ret&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ret&amp;#039; is assigned a value that is never used.">
            <location file="src\common\session.c" line="877"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\session.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\session.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_NETDB_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_NETDB_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\session.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\session.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\session.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\session.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\session.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\common\smtp.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\smtp.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\smtp.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_NETDB_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_NETDB_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\smtp.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\smtp.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\smtp.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_XOPEN_SOURCE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_XOPEN_SOURCE&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\smtp.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\smtp.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\common\socket.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\socket.c" line="680"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr_data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr_data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\socket.c" line="948"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr_data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr_data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\socket.c" line="1003"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_IO_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_IO_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\socket.c" line="0"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: newline" verbose="Unused variable: newline">
            <location file="src\common\socket.c" line="1572"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: n" verbose="Unused variable: n">
            <location file="src\common\socket.c" line="1573"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\socket.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\socket.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\socket.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\common\ssl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl.c" line="0"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i">
            <location file="src\common\ssl.c" line="128"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i">
            <location file="src\common\ssl.c" line="155"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBETPAN&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBETPAN&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_NETDB_H;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_NETDB_H;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_PATHS_H;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_PATHS_H;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_PARAM_H;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_PARAM_H;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\common\ssl_certificate.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl_certificate.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\common\ssl_certificate.c" line="395"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\ssl_certificate.c" line="528"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;md&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;md&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\ssl_certificate.c" line="660"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fingerprint&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fingerprint&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\ssl_certificate.c" line="662"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\ssl_certificate.c" line="1033"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;r&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;r&amp;#039; is assigned a value that is never used.">
            <location file="src\common\ssl_certificate.c" line="275"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl_certificate.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl_certificate.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl_certificate.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_NETDB_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_NETDB_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl_certificate.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl_certificate.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl_certificate.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl_certificate.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\ssl_certificate.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;notfound&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;notfound&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\string_match.c" line="54"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: match" verbose="Unused variable: match">
            <location file="src\common\string_match.c" line="53"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: notfound" verbose="Unused variable: notfound">
            <location file="src\common\string_match.c" line="54"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i">
            <location file="src\common\string_match.c" line="55"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: j" verbose="Unused variable: j">
            <location file="src\common\string_match.c" line="55"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: k" verbose="Unused variable: k">
            <location file="src\common\string_match.c" line="55"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\string_match.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\string_match.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\string_match.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\string_match.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\stringtable.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\stringtable.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\stringtable.c" line="0"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\common\tags.c" line="70"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\tags.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\tags.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\tags.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\tags.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\tags.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_WAIT_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_WAIT_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\tags.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\tags.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_PATH_MAILDIR&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_PATH_MAILDIR&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\tags.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\tags.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmpl&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmpl&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\template.c" line="115"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;filename&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;filename&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\template.c" line="158"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmpl&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmpl&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\template.c" line="228"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\template.c" line="229"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\template.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\template.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\template.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\template.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\template.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\template.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_PATH_MAILDIR&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_PATH_MAILDIR&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\template.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\common\utils.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\utils.c" line="320"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;srcp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;srcp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\utils.c" line="733"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\utils.c" line="815"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\utils.c" line="1568"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;parent_dir&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;parent_dir&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\utils.c" line="2287"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\utils.c" line="3802"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;found_shred&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;found_shred&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\utils.c" line="5332"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;args&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;args&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\utils.c" line="5333"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\common\utils.c" line="3548"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\common\utils.c" line="3684"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\common\utils.c" line="669"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\common\utils.c" line="670"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\common\utils.c" line="686"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\common\utils.c" line="687"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\common\utils.c" line="950"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\common\utils.c" line="1037"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\common\utils.c" line="1450"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\common\utils.c" line="1476"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\common\utils.c" line="1478"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\common\utils.c" line="1637"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;DESKTOPFILEPATH&amp;#039; since the value of &amp;#039;DESKTOPFILEPATH&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;DESKTOPFILEPATH&amp;#039; since the value of &amp;#039;DESKTOPFILEPATH&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\common\utils.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\utils.c" line="2105"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\utils.c" line="1854"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fd&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fd&amp;#039; is assigned a value that is never used.">
            <location file="src\common\utils.c" line="204"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;follow_symlinks&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;follow_symlinks&amp;#039; is assigned a value that is never used.">
            <location file="src\common\utils.c" line="5467"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;dllnames[3]&amp;#039; accessed at index 9998, which is out of bounds." verbose="Array &amp;#039;dllnames[3]&amp;#039; accessed at index 9998, which is out of bounds.">
            <location file="src\common\utils.c" line="1827"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\common\utils.c" line="3080"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\utils.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\utils.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_NETDB_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_NETDB_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\utils.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_PATHS_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\utils.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_PARAM_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\utils.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;digit1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;digit1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\uuencode.c" line="40"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;digit2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;digit2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\uuencode.c" line="40"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;last_sep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;last_sep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\w32_account.c" line="160"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;GetTokenInformation&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;GetTokenInformation&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\w32_account.c" line="162"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ConvertSidToStringSid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ConvertSidToStringSid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\w32_account.c" line="169"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;TokenLogonSid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;TokenLogonSid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\w32_account.c" line="173"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_account.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_account.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_account.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_account.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_account.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_dirent.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\w32_reg.c" line="118"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;key&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;key&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\w32_reg.c" line="121"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_reg.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_BACKTRACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_reg.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_reg.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_reg.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_reg.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_signal.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_stat.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_stdio.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_stdlib.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\w32_string.c" line="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\w32_string.c" line="39"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_string.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_time.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_unistd.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_BASETYPS_H;interface&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\w32_wait.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xmlnode&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xmlnode&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\xml.c" line="124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tag&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tag&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\xml.c" line="125"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;utf8_attr_name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;utf8_attr_name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\xml.c" line="283"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;utf8_attr_value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;utf8_attr_value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\xml.c" line="284"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;attr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;attr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\xml.c" line="513"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="src\common\xml.c" line="552"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\xml.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\xml.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\xml.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\xml.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pName&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pName&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\xmlprops.c" line="267"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pValue&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pValue&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\common\xmlprops.c" line="268"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ALLOCA_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\xmlprops.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\xmlprops.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\xmlprops.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__CYGWIN__&amp;#039; was not checked because its code equals another one.">
            <location file="src\common\xmlprops.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\etpan\etpan-ssl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBETPAN;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBETPAN;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\etpan\etpan-ssl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\etpan\etpan-ssl.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\etpan\etpan-thread-manager.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\etpan\etpan-thread-manager.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\etpan\etpan-thread-manager.c" line="321"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\etpan\imap-thread.c" line="0"/>
        </error>
        <error id="redundantCopy" severity="performance" msg="Buffer &amp;#039;buf&amp;#039; is being written before its old content has been used." verbose="Buffer &amp;#039;buf&amp;#039; is being written before its old content has been used.">
            <location file="src\etpan\imap-thread.c" line="114"/>
            <location file="src\etpan\imap-thread.c" line="115"/>
        </error>
        <error id="redundantCopy" severity="performance" msg="Buffer &amp;#039;buf&amp;#039; is being written before its old content has been used." verbose="Buffer &amp;#039;buf&amp;#039; is being written before its old content has been used.">
            <location file="src\etpan\imap-thread.c" line="150"/>
            <location file="src\etpan\imap-thread.c" line="151"/>
        </error>
        <error id="redundantCopy" severity="performance" msg="Buffer &amp;#039;buf&amp;#039; is being written before its old content has been used." verbose="Buffer &amp;#039;buf&amp;#039; is being written before its old content has been used.">
            <location file="src\etpan\imap-thread.c" line="188"/>
            <location file="src\etpan\imap-thread.c" line="189"/>
        </error>
        <error id="redundantCopy" severity="performance" msg="Buffer &amp;#039;buf&amp;#039; is being written before its old content has been used." verbose="Buffer &amp;#039;buf&amp;#039; is being written before its old content has been used.">
            <location file="src\etpan\imap-thread.c" line="233"/>
            <location file="src\etpan\imap-thread.c" line="234"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;r&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;r&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\etpan\imap-thread.c" line="2802"/>
            <location file="src\etpan\imap-thread.c" line="2806"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;r&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;r&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\etpan\imap-thread.c" line="2806"/>
            <location file="src\etpan\imap-thread.c" line="2810"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;r&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;r&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\etpan\imap-thread.c" line="2810"/>
            <location file="src\etpan\imap-thread.c" line="2815"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\etpan\imap-thread.c" line="142"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\etpan\imap-thread.c" line="223"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\etpan\imap-thread.c" line="1530"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\etpan\imap-thread.c" line="2709"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;header&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;header&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\etpan\imap-thread.c" line="2743"/>
        </error>
        <error id="useClosedFile" severity="error" msg="Used file that is not opened." verbose="Used file that is not opened.">
            <location file="src\etpan\imap-thread.c" line="2518"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\etpan\imap-thread.c" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;fd&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;fd&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\etpan\imap-thread.c" line="1081"/>
            <location file="src\etpan\imap-thread.c" line="1084"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;SOLARIS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;SOLARIS&amp;#039; was not checked because its code equals another one.">
            <location file="src\etpan\imap-thread.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;TIOCNOTTY&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;TIOCNOTTY&amp;#039; was not checked because its code equals another one.">
            <location file="src\etpan\imap-thread.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\etpan\imap-thread.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\etpan\nntp-thread.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\etpan\nntp-thread.c" line="0"/>
        </error>
        <error id="redundantCopy" severity="performance" msg="Buffer &amp;#039;buf&amp;#039; is being written before its old content has been used." verbose="Buffer &amp;#039;buf&amp;#039; is being written before its old content has been used.">
            <location file="src\etpan\nntp-thread.c" line="72"/>
            <location file="src\etpan\nntp-thread.c" line="73"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\etpan\nntp-thread.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\gtk\about.c" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\gtk\about.c" line="587"/>
            <location file="src\gtk\about.c" line="591"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\about.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\about.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;accel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;accel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\colorlabel.c" line="323"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\colorlabel.c" line="395"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\colorlabel.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\colorlabel.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\colorsel.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\colorsel.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\combobox.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\combobox.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\description_window.c" line="113"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\description_window.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\description_window.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\filesel.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\filesel.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\foldersort.c" line="52"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkaspell.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\gtk\gtkaspell.c" line="476"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dict&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dict&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkaspell.c" line="1650"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dict&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dict&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkaspell.c" line="1790"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_WAIT_H;USE_ENCHANT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_WAIT_H;USE_ENCHANT&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkaspell.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkaspell.c" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: b - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: b - otherwise it is redundant to check it against null.">
            <location file="src\gtk\gtkcmclist.c" line="7405"/>
            <location file="src\gtk\gtkcmclist.c" line="7383"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: b - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: b - otherwise it is redundant to check it against null.">
            <location file="src\gtk\gtkcmclist.c" line="7407"/>
            <location file="src\gtk\gtkcmclist.c" line="7383"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;alignment&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;alignment&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmclist.c" line="1694"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;clist_row&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;clist_row&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmclist.c" line="4106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;clist_row&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;clist_row&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmclist.c" line="4570"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;clist_row&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;clist_row&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmclist.c" line="4748"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;clist&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;clist&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmclist.c" line="4899"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;clist_row&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;clist_row&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmclist.c" line="5990"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmclist.c" line="6600"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkcmclist.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkcmclist.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;account&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;account&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkutils.c" line="821"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkutils.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkutils.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkutils.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sel_row&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sel_row&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmctree.c" line="2689"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmctree.c" line="2825"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;work&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;work&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmctree.c" line="3147"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmctree.c" line="3235"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;work&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;work&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmctree.c" line="3513"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;work&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;work&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmctree.c" line="3570"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmctree.c" line="3631"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmctree.c" line="4042"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmctree.c" line="4697"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkcmctree.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkcmctree.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;menu_item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;menu_item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="286"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;active_widget&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;active_widget&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="313"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;list&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;list&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="314"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;style&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;style&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="513"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;window&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;window&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="515"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="603"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;menu_item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;menu_item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="662"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="787"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="833"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="863"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="913"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="1025"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;children&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;children&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="1025"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="1026"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkcmoptionmenu.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtksctree.c" line="481"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;list_start&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;list_start&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\gtksctree.c" line="1118"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtksctree.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtksctree.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkshruler.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkshruler.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkvscrollbutton.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\gtkvscrollbutton.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;icon_label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;icon_label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\icon_legend.c" line="115"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desc_label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desc_label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\icon_legend.c" line="116"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\icon_legend.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\icon_legend.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\inputdialog.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\inputdialog.c" line="0"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i">
            <location file="src\gtk\logwindow.c" line="164"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\logwindow.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\logwindow.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\menu.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\menu.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;text&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;text&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\pluginwindow.c" line="152"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\pluginwindow.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\pluginwindow.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\pluginwindow.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\gtk\prefswindow.c" line="422"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;focused_child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;focused_child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\prefswindow.c" line="223"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\prefswindow.c" line="296"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\prefswindow.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\prefswindow.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\progressdialog.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\progressdialog.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\quicksearch.c" line="1014"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;newstr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;newstr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\quicksearch.c" line="1062"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\quicksearch.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\spell_entry.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fcolor&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fcolor&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\spell_entry.c" line="363"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ucolor&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ucolor&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\spell_entry.c" line="363"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;unline&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;unline&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\spell_entry.c" line="363"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;word&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;word&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\spell_entry.c" line="393"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;length&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;length&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\spell_entry.c" line="431"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;layout&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;layout&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\spell_entry.c" line="470"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;text&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;text&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\gtk\spell_entry.c" line="675"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCOMPFACE&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\spell_entry.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_WCHAR_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\spell_entry.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_ENCHANT&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\spell_entry.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\gtk\sslcertwindow.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\acpi_notifier\acpi_notifier.c" line="653"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;action&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;action&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\acpi_notifier\acpi_notifier.c" line="710"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\acpi_notifier\acpi_notifier.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\address_keeper\address_keeper.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\address_keeper\address_keeper_prefs.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\archive\archiver.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\archiver_gtk.c" line="381"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\archiver_gtk.c" line="384"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\archiver_gtk.c" line="386"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;md5_file&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;md5_file&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\archiver_gtk.c" line="387"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;text&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;text&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\archiver_gtk.c" line="388"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;file&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;file&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\archiver_gtk.c" line="389"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msg_trash&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msg_trash&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\archiver_gtk.c" line="390"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;date&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;date&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\archiver_gtk.c" line="391"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\archiver_gtk.c" line="497"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;file&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;file&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\archiver_gtk.c" line="899"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;text_count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;text_count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\archiver_gtk.c" line="944"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &amp;#039;name&amp;#039; nulled but not freed upon failure" verbose="Common realloc mistake: &amp;#039;name&amp;#039; nulled but not freed upon failure">
            <location file="src\plugins\archive\archiver_gtk.c" line="353"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\archive\archiver_gtk.c" line="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;compression_group&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;compression_group&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\archive\archiver_prefs.c" line="242"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;format_group&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;format_group&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\archive\archiver_prefs.c" line="294"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\archive\archiver_prefs.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\plugins\archive\libarchive_archive.c" line="236"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;buf&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;buf&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\plugins\archive\libarchive_archive.c" line="532"/>
            <location file="src\plugins\archive\libarchive_archive.c" line="533"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;buf&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;buf&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\plugins\archive\libarchive_archive.c" line="557"/>
            <location file="src\plugins\archive\libarchive_archive.c" line="558"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;buf&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;buf&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\plugins\archive\libarchive_archive.c" line="571"/>
            <location file="src\plugins\archive\libarchive_archive.c" line="572"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\libarchive_archive.c" line="98"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\libarchive_archive.c" line="129"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pos&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pos&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\libarchive_archive.c" line="197"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;file&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;file&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\libarchive_archive.c" line="245"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;file&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;file&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\libarchive_archive.c" line="466"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\archive\libarchive_archive.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;out&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;out&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\libarchive_archive.c" line="380"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\libarchive_archive.c" line="383"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;opt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;opt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\libarchive_archive.c" line="637"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;res&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;res&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\archive\libarchive_archive.c" line="643"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;msg&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;msg&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\archive\libarchive_archive.c" line="468"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;info&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;info&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\att_remover\att_remover.c" line="467"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;partinfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;partinfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\att_remover\att_remover.c" line="467"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\att_remover\att_remover.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\attachwarner\attachwarner.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\attachwarner\attachwarner_prefs.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msginfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\bogofilter\bogofilter.c" line="199"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;curnum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;curnum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\bogofilter\bogofilter.c" line="201"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;file&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;file&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\bogofilter\bogofilter.c" line="202"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\bogofilter\bogofilter.c" line="850"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ok_to_thread&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ok_to_thread&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\bogofilter\bogofilter.c" line="480"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bogofilter\bogofilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ERRNO_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ERRNO_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bogofilter\bogofilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LOCALE_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LOCALE_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bogofilter\bogofilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_PWD_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_PWD_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bogofilter\bogofilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SIGNAL_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SIGNAL_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bogofilter\bogofilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYSEXITS_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYSEXITS_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bogofilter\bogofilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_ERRNO_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_ERRNO_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bogofilter\bogofilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_TIME_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_TIME_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bogofilter\bogofilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_TIME_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_TIME_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bogofilter\bogofilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bogofilter\bogofilter_gtk.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;file&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;file&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\bsfilter\bsfilter.c" line="477"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bsfilter\bsfilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ERRNO_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ERRNO_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bsfilter\bsfilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_PWD_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_PWD_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bsfilter\bsfilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SIGNAL_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SIGNAL_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bsfilter\bsfilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYSEXITS_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYSEXITS_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bsfilter\bsfilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_ERRNO_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_ERRNO_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bsfilter\bsfilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_TIME_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_TIME_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bsfilter\bsfilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_WAIT_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_WAIT_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bsfilter\bsfilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_TIME_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_TIME_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bsfilter\bsfilter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\bsfilter\bsfilter_gtk.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;max&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;max&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\clamd\clamav_plugin.c" line="87"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\clamd\clamav_plugin.c" line="89"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\clamd\clamav_plugin.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;file&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;file&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\clamd\clamav_plugin_gtk.c" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\clamd\clamav_plugin_gtk.c" line="157"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\clamd\clamav_plugin_gtk.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n_read&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n_read&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\clamd\libclamd\clamd-plugin.c" line="489"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;command&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;command&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\clamd\libclamd\clamd-plugin.c" line="490"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;n_read&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;n_read&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\clamd\libclamd\clamd-plugin.c" line="390"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;n_read&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;n_read&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\clamd\libclamd\clamd-plugin.c" line="527"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;n_read&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;n_read&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\clamd\libclamd\clamd-plugin.c" line="576"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\clamd\libclamd\clamd-plugin.c" line="0"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iter" verbose="Unused variable: iter">
            <location file="src\plugins\fancy\fancy_prefs.c" line="281"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\fancy\fancy_prefs.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;image&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;image&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\fancy\fancy_viewer.c" line="407"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\fancy\fancy_viewer.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\fetchinfo\fetchinfo_plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\fetchinfo\fetchinfo_plugin_gtk.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\gdata\cm_gdata_contacts.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\gdata\cm_gdata_prefs.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_UNIX&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_UNIX&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\gdata\gdata_plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\gdata\gdata_plugin.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\geolocation\geolocation_plugin.c" line="93"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\geolocation\geolocation_plugin.c" line="124"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\geolocation\geolocation_plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\geolocation\geolocation_plugin.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;url&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;url&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\libravatar\libravatar.c" line="265"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;subdir&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;subdir&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\libravatar\libravatar.c" line="315"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cache_file&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cache_file&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\libravatar\libravatar.c" line="359"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\libravatar\libravatar.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\libravatar\libravatar.c" line="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;r&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;r&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\libravatar\libravatar_missing.c" line="58"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c">
            <location file="src\plugins\libravatar\libravatar_missing.c" line="58"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\plugins\libravatar\libravatar_missing.c" line="58"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: file" verbose="Resource leak: file">
            <location file="src\plugins\libravatar\libravatar_missing.c" line="53"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\libravatar\libravatar_prefs.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GNUTLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\libravatar\libravatar_prefs.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\mailmbox\mailimf.c" line="359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\mailmbox\mailimf.c" line="968"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\mailmbox\mailimf.c" line="1331"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\mailmbox\mailimf.c" line="5378"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &amp;#039;mailimf_token_value::value&amp;#039; is never used." verbose="struct or union member &amp;#039;mailimf_token_value::value&amp;#039; is never used.">
            <location file="src\plugins\mailmbox\mailimf.c" line="2097"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dir&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dir&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\mailmbox\mailimf_types_helper.c" line="1419"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mytm&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mytm&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\mailmbox\mailimf_types_helper.c" line="1423"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\mailmbox\mailimf_write.c" line="734"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;do_fold&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;do_fold&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\mailmbox\mailimf_write.c" line="1475"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\mailmbox\mailmbox.c" line="410"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\mailmbox\mailmbox.c" line="412"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp_uid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp_uid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\mailmbox\mailmbox.c" line="413"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\mailmbox\mailmbox.c" line="522"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;numlen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;numlen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\mailmbox\mailmbox.c" line="524"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\mailmbox\mailmbox_folder.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;MEASURE_TIME&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;MEASURE_TIME&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\mailmbox\mailmbox_folder.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\mailmbox\mailmbox_parse.c" line="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;string&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;string&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\mailmbox\mmapstring.c" line="330"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;len&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;len&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file="src\plugins\mailmbox\mmapstring.c" line="332"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\mailmbox\plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\mailmbox\plugin_gtk.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\plugins\notification\notification_banner.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_banner.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCANBERRA_GTK&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCANBERRA_GTK&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_banner.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_banner.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_TRAYICON&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_TRAYICON&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_banner.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_COMMAND&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_COMMAND&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_banner.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_HOTKEYS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_HOTKEYS&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_banner.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_INDICATOR&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_INDICATOR&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_banner.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_LCDPROC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_LCDPROC&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_banner.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_banner.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\plugins\notification\notification_command.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_command.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCANBERRA_GTK&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCANBERRA_GTK&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_command.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_command.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_TRAYICON&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_TRAYICON&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_command.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_BANNER&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_BANNER&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_command.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_COMMAND&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_COMMAND&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_command.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_HOTKEYS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_HOTKEYS&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_command.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_INDICATOR&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_INDICATOR&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_command.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_LCDPROC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_LCDPROC&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_command.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_command.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\plugins\notification\notification_core.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item_count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item_count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\notification\notification_core.c" line="214"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\notification\notification_core.c" line="327"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\notification\notification_core.c" line="478"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;list_item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;list_item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\notification\notification_core.c" line="530"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder_id_list&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder_id_list&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\notification\notification_core.c" line="532"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cmsg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cmsg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\notification\notification_core.c" line="556"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_core.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\notification\notification_foldercheck.c" line="186"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\notification\notification_foldercheck.c" line="713"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ident_list&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ident_list&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\notification\notification_foldercheck.c" line="918"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\notification\notification_foldercheck.c" line="968"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_foldercheck.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\plugins\notification\notification_hotkeys.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_hotkeys.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCANBERRA_GTK&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCANBERRA_GTK&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_hotkeys.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_hotkeys.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_hotkeys.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_TRAYICON&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_TRAYICON&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_hotkeys.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_BANNER&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_BANNER&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_hotkeys.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_COMMAND&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_COMMAND&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_hotkeys.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_HOTKEYS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_HOTKEYS&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_hotkeys.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_INDICATOR&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_INDICATOR&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_hotkeys.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_LCDPROC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_LCDPROC&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_hotkeys.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\plugins\notification\notification_indicator.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_indicator.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCANBERRA_GTK&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCANBERRA_GTK&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_indicator.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_indicator.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_indicator.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_TRAYICON&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_TRAYICON&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_indicator.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_BANNER&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_BANNER&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_indicator.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_COMMAND&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_COMMAND&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_indicator.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_HOTKEYS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_HOTKEYS&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_indicator.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_INDICATOR&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_INDICATOR&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_indicator.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_LCDPROC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_LCDPROC&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_indicator.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\plugins\notification\notification_lcdproc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_lcdproc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_lcdproc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCANBERRA_GTK&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCANBERRA_GTK&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_lcdproc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_lcdproc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_lcdproc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_TRAYICON&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_TRAYICON&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_lcdproc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_BANNER&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_BANNER&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_lcdproc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_COMMAND&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_COMMAND&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_lcdproc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_HOTKEYS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_HOTKEYS&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_lcdproc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_INDICATOR&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_INDICATOR&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_lcdproc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_pixbuf.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\plugins\notification\notification_plugin.c" line="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;hookdata&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;hookdata&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\notification\notification_plugin.c" line="190"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_plugin.c" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\plugins\notification\notification_plugin.c" line="102"/>
            <location file="src\plugins\notification\notification_plugin.c" line="106"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\plugins\notification\notification_plugin.c" line="124"/>
            <location file="src\plugins\notification\notification_plugin.c" line="127"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;retVal&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\plugins\notification\notification_plugin.c" line="134"/>
            <location file="src\plugins\notification\notification_plugin.c" line="137"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\plugins\notification\notification_popup.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_popup.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nftype&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nftype&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\notification\notification_popup.c" line="102"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ftype&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ftype&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\notification\notification_popup.c" line="139"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;nftype&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;nftype&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\notification\notification_popup.c" line="232"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCANBERRA_GTK&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCANBERRA_GTK&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_popup.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_popup.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_TRAYICON&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_TRAYICON&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_popup.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY;USE_NEW_ADDRBOOK&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY;USE_NEW_ADDRBOOK&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_popup.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_BANNER&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_BANNER&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_popup.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_COMMAND&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_COMMAND&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_popup.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_HOTKEYS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_HOTKEYS&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_popup.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_INDICATOR&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_INDICATOR&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_popup.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\plugins\notification\notification_prefs.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_prefs.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\plugins\notification\notification_trayicon.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_trayicon.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_trayicon.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;menuitem&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;menuitem&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\notification\notification_trayicon.c" line="341"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ac_prefs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ac_prefs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\notification\notification_trayicon.c" line="342"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBCANBERRA_GTK&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBCANBERRA_GTK&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_trayicon.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_trayicon.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY;NOTIFICATION_POPUP&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_trayicon.c" line="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;str_empty&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;str_empty&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\notification\notification_trayicon.c" line="928"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LIBNOTIFY;USE_NEW_ADDRBOOK&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LIBNOTIFY;USE_NEW_ADDRBOOK&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_trayicon.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_BANNER&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_BANNER&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_trayicon.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_COMMAND&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_COMMAND&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_trayicon.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NOTIFICATION_HOTKEYS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NOTIFICATION_HOTKEYS&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\notification\notification_trayicon.c" line="0"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;-&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="src\plugins\notification\gtkhotkey\x11\eggaccelerators.c" line="322"/>
            <location file="src\plugins\notification\gtkhotkey\x11\eggaccelerators.c" line="322"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;tmp&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;tmp&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\plugins\pdf_viewer\poppler_viewer.c" line="677"/>
            <location file="src\plugins\pdf_viewer\poppler_viewer.c" line="708"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;src&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;src&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\pdf_viewer\poppler_viewer.c" line="110"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;uri&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;uri&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\pdf_viewer\poppler_viewer.c" line="815"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmpfile&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmpfile&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\pdf_viewer\poppler_viewer.c" line="1243"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\pdf_viewer\poppler_viewer.c" line="1244"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cmdline&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cmdline&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\pdf_viewer\poppler_viewer.c" line="1284"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\pdf_viewer\poppler_viewer.c" line="1284"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;charset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;charset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\pdf_viewer\poppler_viewer.c" line="1434"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pdf_viewer\poppler_viewer.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dest&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dest&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\pdf_viewer\poppler_viewer.c" line="817"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\perl\perl_gtk.c" line="0"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always false because &amp;#039;else if&amp;#039; condition matches previous condition at line 125." verbose="Expression is always false because &amp;#039;else if&amp;#039; condition matches previous condition at line 125.">
            <location file="src\plugins\perl\perl_plugin.c" line="134"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ee&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ee&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\perl\perl_plugin.c" line="187"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;walk&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;walk&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\perl\perl_plugin.c" line="374"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;header&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;header&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\perl\perl_plugin.c" line="690"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bookname&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bookname&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\perl\perl_plugin.c" line="1040"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;logtext&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;logtext&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\perl\perl_plugin.c" line="1311"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;logtext&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;logtext&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\perl\perl_plugin.c" line="1354"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;inbox_folder&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;inbox_folder&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\perl\perl_plugin.c" line="1420"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bookname&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bookname&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\perl\perl_plugin.c" line="1452"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cmdline&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cmdline&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\perl\perl_plugin.c" line="1581"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\perl\perl_plugin.c" line="1583"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\perl\perl_plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\perl\perl_plugin.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ae&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ae&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\pgpcore\autocompletion.c" line="50"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\autocompletion.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\passphrase.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_PLATFORM_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_PLATFORM_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\passphrase.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\passphrase.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GPGME&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GPGME&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\passphrase.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\pgp_utils.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;filename&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;filename&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\pgpcore\pgp_utils.c" line="68"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\pgpcore\pgp_utils.c" line="69"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GPGME&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GPGME&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\pgp_utils.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\pgp_viewer.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\plugin.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;systems&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;systems&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\pgpcore\prefs_gpg.c" line="641"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\pgpcore\prefs_gpg.c" line="642"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;key_group&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;key_group&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\pgpcore\prefs_gpg.c" line="339"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\prefs_gpg.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\select-keys.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;windmill&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;windmill&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\pgpcore\select-keys.c" line="91"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\plugins\pgpcore\sgpgme.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\sgpgme.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32;LC_CTYPE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32;LC_CTYPE&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\sgpgme.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_OS_WIN32;LC_MESSAGES&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_OS_WIN32;LC_MESSAGES&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\sgpgme.c" line="0"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;result&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;result&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file="src\plugins\pgpcore\sgpgme.c" line="972"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ctype_locale&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ctype_locale&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\pgpcore\sgpgme.c" line="620"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;messages_locale&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;messages_locale&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\pgpcore\sgpgme.c" line="620"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ctype_utf8_locale&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ctype_utf8_locale&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\pgpcore\sgpgme.c" line="621"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;messages_utf8_locale&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;messages_utf8_locale&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\pgpcore\sgpgme.c" line="621"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &amp;#039;result&amp;#039; nulled but not freed upon failure" verbose="Common realloc mistake: &amp;#039;result&amp;#039; nulled but not freed upon failure">
            <location file="src\plugins\pgpcore\sgpgme.c" line="967"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;G_PLATFORM_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;G_PLATFORM_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\sgpgme.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\sgpgme.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_GPGME_PKA_TRUST&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_GPGME_PKA_TRUST&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\sgpgme.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;LC_CTYPE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;LC_CTYPE&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\sgpgme.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;LC_MESSAGES&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;LC_MESSAGES&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\sgpgme.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_GPGME&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_GPGME&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpcore\sgpgme.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpinline\pgpinline.c" line="0"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;len&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;len&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file="src\plugins\pgpinline\pgpinline.c" line="580"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;len&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;len&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file="src\plugins\pgpinline\pgpinline.c" line="727"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpinline\plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpmime\pgpmime.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\pgpmime\pgpmime.c" line="322"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;len&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;len&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file="src\plugins\pgpmime\pgpmime.c" line="580"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;len&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;len&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file="src\plugins\pgpmime\pgpmime.c" line="715"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\pgpmime\plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\python\accounttype.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;children&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;children&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\python\clawsmailmodule.c" line="178"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tag_object&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tag_object&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\python\clawsmailmodule.c" line="480"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;account_object&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;account_object&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\python\clawsmailmodule.c" line="509"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mailbox_object&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mailbox_object&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\python\clawsmailmodule.c" line="536"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\python\clawsmailmodule.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ac&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ac&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\python\composewindowtype.c" line="94"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\python\composewindowtype.c" line="95"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\python\composewindowtype.c" line="97"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;compose&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;compose&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\python\composewindowtype.c" line="99"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\python\composewindowtype.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\python\folderpropertiestype.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ff&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ff&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\python\foldertype.c" line="384"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;arglist&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;arglist&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\python\foldertype.c" line="385"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\python\foldertype.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\python\mailboxtype.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tag_object&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tag_object&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\python\messageinfotype.c" line="121"/>
        </error>
        <error id="unusedAllocatedMemory" severity="style" msg="Variable &amp;#039;header_str_dup&amp;#039; is allocated memory that is never used." verbose="Variable &amp;#039;header_str_dup&amp;#039; is allocated memory that is never used.">
            <location file="src\plugins\python\messageinfotype.c" line="204"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\python\messageinfotype.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\python\nodetype.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\python\python-hooks.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\python\python_plugin.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\plugins\rssyl\old_feeds.c" line="141"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;of&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;of&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\old_feeds.c" line="41"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\old_feeds.c" line="42"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmpurl&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmpurl&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\opml_export.c" line="58"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\opml_export.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\plugins\rssyl\opml_import.c" line="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\opml_import.c" line="56"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\opml_import.c" line="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;num&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;num&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\rssyl\parse822.c" line="279"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\parse822.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\plugin.c" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;need_scan&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;need_scan&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\plugins\rssyl\rssyl.c" line="786"/>
            <location file="src\plugins\rssyl\rssyl.c" line="794"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rootitem&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rootitem&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\rssyl.c" line="375"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;destfile&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;destfile&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\rssyl.c" line="728"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fileinfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fileinfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\rssyl.c" line="730"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\rssyl.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;atit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;atit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\rssyl_add_item.c" line="57"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;btit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;btit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\rssyl_add_item.c" line="57"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\rssyl_add_item.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\rssyl_cb_menu.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\plugins\rssyl\rssyl_deleted.c" line="70"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;line&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;line&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\rssyl_deleted.c" line="88"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ctx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ctx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\rssyl_deleted.c" line="322"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\rssyl_deleted.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\rssyl_feed.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\rssyl_feed_props.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\rssyl_gtk.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\rssyl_parse_feed.c" line="156"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\rssyl_parse_feed.c" line="156"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\rssyl_parse_feed.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\rssyl_prefs.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\rssyl_subscribe.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;newtitle&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;newtitle&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\rssyl_subscribe_gtk.c" line="44"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\rssyl_subscribe_gtk.c" line="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;num&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;num&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\rssyl\rssyl_update_comments.c" line="91"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\rssyl_update_comments.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\rssyl_update_feed.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\rssyl_update_format.c" line="68"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fpath&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fpath&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\rssyl_update_format.c" line="245"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\rssyl_update_format.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\strutils.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\rssyl\libfeed\date.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\plugins\rssyl\libfeed\feed.c" line="81"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CURLOPT_MUTE&amp;#039; since the value of &amp;#039;CURLOPT_MUTE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CURLOPT_MUTE&amp;#039; since the value of &amp;#039;CURLOPT_MUTE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\plugins\rssyl\libfeed\feed.c" line="1"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\plugins\rssyl\libfeed\feeditem.c" line="89"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\plugins\rssyl\libfeed\feeditemenclosure.c" line="52"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;version&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;version&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\libfeed\parser.c" line="64"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;title&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;title&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\libfeed\parser_opml.c" line="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\libfeed\parser_opml.c" line="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;url&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;url&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\rssyl\libfeed\parser_opml.c" line="36"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\smime\plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\smime\smime.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmpstr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmpstr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\smime\smime.c" line="96"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmpstr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmpstr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\smime\smime.c" line="206"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\smime\smime.c" line="406"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;auth&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;auth&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\spam_report\spam_report.c" line="195"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spam_report\spam_report.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spam_report\spam_report.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;table&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;table&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\spam_report\spam_report_prefs.c" line="108"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spam_report\spam_report_prefs.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\plugins\spamassassin\libspamc.c" line="0"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file="src\plugins\spamassassin\libspamc.c" line="890"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\spamassassin\libspamc.c" line="351"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;raw_len&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;raw_len&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file="src\plugins\spamassassin\libspamc.c" line="458"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;raw_len&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;raw_len&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file="src\plugins\spamassassin\libspamc.c" line="486"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\plugins\spamassassin\libspamc.c" line="796"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\plugins\spamassassin\libspamc.c" line="934"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;DO_CONNECT_DEBUG_SYSLOGS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;DO_CONNECT_DEBUG_SYSLOGS&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\libspamc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ERRNO_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ERRNO_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\libspamc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_INADDR_NONE&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_INADDR_NONE&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\libspamc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYSEXITS_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYSEXITS_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\libspamc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_ERRNO_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_ERRNO_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\libspamc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_TIME_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_TIME_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\libspamc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_TIME_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_TIME_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\libspamc.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;contents&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;contents&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\spamassassin\spamassassin.c" line="396"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;file&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;file&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\spamassassin\spamassassin.c" line="418"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmpcmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmpcmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\spamassassin\spamassassin.c" line="460"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\spamassassin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_ERRNO_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_ERRNO_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\spamassassin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_LOCALE_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_LOCALE_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\spamassassin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_PWD_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_PWD_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\spamassassin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SIGNAL_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SIGNAL_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\spamassassin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYSEXITS_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYSEXITS_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\spamassassin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_ERRNO_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_ERRNO_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\spamassassin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_SYS_TIME_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_SYS_TIME_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\spamassassin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_TIME_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_TIME_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\spamassassin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\spamassassin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\spamassassin_gtk.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;thistime&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;thistime&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\spamassassin\utils.c" line="160"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;thistime&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;thistime&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\spamassassin\utils.c" line="188"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_WIN32&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_WIN32&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\spamassassin\utils.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;filename&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;filename&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\tnef_parse\tnef_dump.c" line="161"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\tnef_parse\tnef_dump.c" line="337"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;charptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;charptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\tnef_parse\tnef_dump.c" line="581"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ddword_ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ddword_ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\tnef_parse\tnef_dump.c" line="583"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\tnef_parse\tnef_dump.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;content_type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;content_type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\tnef_parse\tnef_parse.c" line="91"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;info&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;info&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\tnef_parse\tnef_parse.c" line="221"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\tnef_parse\tnef_parse.c" line="0"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="1013"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%i in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%i in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="1013"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%i in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%i in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="1053"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%i in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%i in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="1274"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="1371"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name_length&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name_length&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="501"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr_length&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr_length&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="501"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;days&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;days&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="558"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;months&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;months&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="560"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="725"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="726"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="1073"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="1086"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mapi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mapi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="1203"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;d&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;d&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="324"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\tnef_parse\ytnef.c" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;depth&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;depth&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\plugins\vcalendar\common-views.c" line="78"/>
            <location file="src\plugins\vcalendar\common-views.c" line="88"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;summaryview&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;summaryview&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\common-views.c" line="157"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;summaryview&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;summaryview&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\common-views.c" line="176"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;summaryview&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;summaryview&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\common-views.c" line="203"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\common-views.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\plugins\vcalendar\day-view.c" line="149"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;v_adj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;v_adj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\day-view.c" line="205"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start_date&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start_date&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\day-view.c" line="359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end_date&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end_date&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\day-view.c" line="359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\day-view.c" line="516"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;button&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;button&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\day-view.c" line="735"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;date&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;date&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\day-view.c" line="736"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\day-view.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\day-view.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\icaltime_as_local.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\icaltime_as_local.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\plugins\vcalendar\month-view.c" line="145"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start_date&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start_date&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\month-view.c" line="346"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end_date&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end_date&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\month-view.c" line="346"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;weekoffset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;weekoffset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\month-view.c" line="351"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\month-view.c" line="574"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\month-view.c" line="574"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\month-view.c" line="574"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;button&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;button&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\month-view.c" line="811"/>
        </error>
        <error id="zerodivcond" severity="warning" msg="Either the condition &amp;#039;avail_d!=0&amp;#039; is useless or there is division by zero at line 836." verbose="Either the condition &amp;#039;avail_d!=0&amp;#039; is useless or there is division by zero at line 836.">
            <location file="src\plugins\vcalendar\month-view.c" line="841"/>
            <location file="src\plugins\vcalendar\month-view.c" line="836"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\month-view.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\month-view.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\plugin.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\vcal_dbus.c" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;duration&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;duration&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\plugins\vcalendar\vcal_folder.c" line="770"/>
            <location file="src\plugins\vcalendar\vcal_folder.c" line="778"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;result&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;result&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\plugins\vcalendar\vcal_folder.c" line="1630"/>
            <location file="src\plugins\vcalendar\vcal_folder.c" line="1656"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;summary&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;summary&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_folder.c" line="1465"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;rootitem&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;rootitem&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\vcalendar\vcal_folder.c" line="1086"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;res&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;res&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\vcalendar\vcal_folder.c" line="1632"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\vcal_folder.c" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: account - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: account - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_manager.c" line="1258"/>
            <location file="src\plugins\vcalendar\vcal_manager.c" line="1268"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: account - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: account - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_manager.c" line="1272"/>
            <location file="src\plugins\vcalendar\vcal_manager.c" line="1268"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\plugins\vcalendar\vcal_manager.c" line="536"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: buft2" verbose="Unused variable: buft2">
            <location file="src\plugins\vcalendar\vcal_manager.c" line="526"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: buft" verbose="Unused variable: buft">
            <location file="src\plugins\vcalendar\vcal_manager.c" line="549"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: buft" verbose="Unused variable: buft">
            <location file="src\plugins\vcalendar\vcal_manager.c" line="1481"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\vcal_manager.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\vcal_manager.c" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1529"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1531"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1534"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1535"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1537"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1538"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1540"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1541"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1543"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1544"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1549"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1550"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1556"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1557"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1559"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1560"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1565"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: event - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: event - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1566"/>
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1501"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;busyprop&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;busyprop&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="736"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;remail&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;remail&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1066"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;user&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;user&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1066"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;domain&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;domain&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1066"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1298"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1718"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1718"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1719"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1719"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1720"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1720"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1721"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1721"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1722"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1722"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1723"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1723"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1724"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1724"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;num&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;num&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1777"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1948"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;calendar&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;calendar&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1950"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prop&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prop&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="2207"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &amp;quot;&amp;quot; to bool always evaluates to true." verbose="Conversion of string literal &amp;quot;&amp;quot; to bool always evaluates to true.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1724"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1729"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1729"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1730"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1730"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1731"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1731"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1732"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1732"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1733"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1733"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;label&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;label&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1734"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spacer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1734"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &amp;quot;&amp;quot; to bool always evaluates to true." verbose="Conversion of string literal &amp;quot;&amp;quot; to bool always evaluates to true.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="1734"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\vcal_meeting_gtk.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\vcal_prefs.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcalendar.c" line="452"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;meet&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;meet&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\vcalendar.c" line="977"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;charset&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;charset&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\vcalendar\vcalendar.c" line="704"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;charset&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;charset&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\vcalendar\vcalendar.c" line="735"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\vcalendar.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\vcalendar.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalattendee.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalcomponent.c" line="149"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalcomponent.c" line="150"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prop&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prop&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalcomponent.c" line="187"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;comp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;comp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalcomponent.c" line="188"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalcomponent.c" line="251"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalcomponent.c" line="252"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalcomponent.c" line="855"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalcomponent.c" line="856"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalcomponent.c" line="889"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalcomponent.c" line="890"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;icalcomponent_isa_component&amp;#039;." verbose="Non-pure function: &amp;#039;icalcomponent_isa_component&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug.">
            <location file="src\plugins\vcalendar\libical\libical\icalcomponent.c" line="76"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalcomponent.c" line="0"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." verbose="Suspicious condition (assignment + comparison); Clarify expression with parentheses.">
            <location file="src\plugins\vcalendar\libical\libical\icalcomponent.c" line="211"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalderivedparameter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalderivedparameter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalderivedparameter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalderivedproperty.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalderivedproperty.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalderivedproperty.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalderivedvalue.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalderivedvalue.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalderivedvalue.c" line="0"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file="src\plugins\vcalendar\libical\libical\icalduration.c" line="198"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\plugins\vcalendar\libical\libical\icalduration.c" line="138"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalduration.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalduration.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalduration.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalenums.c" line="0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: p" verbose="Possible null pointer dereference: p">
            <location file="src\plugins\vcalendar\libical\libical\icalerror.c" line="46"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: p" verbose="Possible null pointer dereference: p">
            <location file="src\plugins\vcalendar\libical\libical\icalerror.c" line="48"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference">
            <location file="src\plugins\vcalendar\libical\libical\icalerror.c" line="46"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference">
            <location file="src\plugins\vcalendar\libical\libical\icalerror.c" line="48"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalerror.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalerror.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__GNUC__ca&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__GNUC__ca&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalerror.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\plugins\vcalendar\libical\libical\icallexer.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YY_NO_UNISTD_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YY_NO_UNISTD_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icallexer.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YY_USER_INIT&amp;#039; since the value of &amp;#039;YY_USER_INIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YY_USER_INIT&amp;#039; since the value of &amp;#039;YY_USER_INIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\plugins\vcalendar\libical\libical\icallexer.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__STDC_VERSION__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__STDC_VERSION__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icallexer.c" line="0"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;num_to_read&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;num_to_read&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file="icallexer.c" line="1161"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;new_size&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;new_size&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file="icallexer.c" line="1174"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;DMALLOC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;DMALLOC&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalmemory.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalmemory.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalmemory.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalmemory.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\plugins\vcalendar\libical\libical\icalmime.c" line="109"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\plugins\vcalendar\libical\libical\icalmime.c" line="122"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\plugins\vcalendar\libical\libical\icalmime.c" line="123"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\plugins\vcalendar\libical\libical\icalmime.c" line="124"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function.">
            <location file="src\plugins\vcalendar\libical\libical\icalmime.c" line="125"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="src\plugins\vcalendar\libical\libical\icalmime.c" line="158"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;part&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;part&amp;#039; to itself.">
            <location file="src\plugins\vcalendar\libical\libical\icalmime.c" line="109"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;part&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;part&amp;#039; to itself.">
            <location file="src\plugins\vcalendar\libical\libical\icalmime.c" line="122"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;header&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;header&amp;#039; to itself.">
            <location file="src\plugins\vcalendar\libical\libical\icalmime.c" line="123"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;line&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;line&amp;#039; to itself.">
            <location file="src\plugins\vcalendar\libical\libical\icalmime.c" line="124"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;size&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;size&amp;#039; to itself.">
            <location file="src\plugins\vcalendar\libical\libical\icalmime.c" line="125"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;comp&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;comp&amp;#039; to itself.">
            <location file="src\plugins\vcalendar\libical\libical\icalmime.c" line="158"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;DMALLOC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;DMALLOC&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalmime.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalmime.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;kind_string&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;kind_string&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalparameter.c" line="208"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: new" verbose="Memory leak: new">
            <location file="src\plugins\vcalendar\libical\libical\icalparameter.c" line="127"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalparameter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalparameter.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalparameter.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalparser.c" line="287"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalparser.c" line="380"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalparser.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalparser.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalparser.c" line="0"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." verbose="Suspicious condition (assignment + comparison); Clarify expression with parentheses.">
            <location file="src\plugins\vcalendar\libical\libical\icalparser.c" line="1016"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalperiod.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalperiod.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalperiod.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;oval&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;oval&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalproperty.c" line="651"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: new" verbose="Memory leak: new">
            <location file="src\plugins\vcalendar\libical\libical\icalproperty.c" line="139"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalproperty.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="254"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="257"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;wd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;wd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="303"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;days_in_month&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;days_in_month&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="734"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;years&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;years&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="994"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start_of_week&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start_of_week&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="1342"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dow&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dow&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="1342"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end_dow&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end_dow&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="1389"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start_dow&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start_dow&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="1389"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;itr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;itr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="1943"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pass&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pass&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="1959"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;itr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;itr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="1960"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="338"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;NDEBUG&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;NDEBUG&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalrecur.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;restr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;restr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalrestriction.c" line="272"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prop&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prop&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalrestriction.c" line="275"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\icalrestriction.c" line="277"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalrestriction.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalrestriction.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalrestriction.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icaltime.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icaltime.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icaltime.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;USE_PTHREAD&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icaltime.c" line="0"/>
        </error>
        <error id="invalidscanf_libc" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\plugins\vcalendar\libical\libical\icaltypes.c" line="203"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icaltypes.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icaltypes.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icaltypes.c" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: v - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\libical\libical\icalvalue.c" line="929"/>
            <location file="src\plugins\vcalendar\libical\libical\icalvalue.c" line="925"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: v - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\libical\libical\icalvalue.c" line="1012"/>
            <location file="src\plugins\vcalendar\libical\libical\icalvalue.c" line="1008"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;v&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;v&amp;#039; to itself.">
            <location file="src\plugins\vcalendar\libical\libical\icalvalue.c" line="923"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: new" verbose="Memory leak: new">
            <location file="src\plugins\vcalendar\libical\libical\icalvalue.c" line="126"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalvalue.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalvalue.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;ICAL_ERRORS_ARE_FATAL;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalvalue.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;_MAC_OS_&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;_MAC_OS_&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalvalue.c" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\plugins\vcalendar\libical\libical\icalyacc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YYENABLE_NLS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YYENABLE_NLS&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalyacc.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YYPRINT&amp;#039; since the value of &amp;#039;YYPRINT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YYPRINT&amp;#039; since the value of &amp;#039;YYPRINT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\plugins\vcalendar\libical\libical\icalyacc.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YYTYPE_INT16&amp;#039; since the value of &amp;#039;YYTYPE_INT16&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YYTYPE_INT16&amp;#039; since the value of &amp;#039;YYTYPE_INT16&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\plugins\vcalendar\libical\libical\icalyacc.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YYTYPE_INT16&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YYTYPE_INT16&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalyacc.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YYTYPE_INT8&amp;#039; since the value of &amp;#039;YYTYPE_INT8&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YYTYPE_INT8&amp;#039; since the value of &amp;#039;YYTYPE_INT8&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\plugins\vcalendar\libical\libical\icalyacc.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YYTYPE_INT8&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YYTYPE_INT8&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalyacc.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YYTYPE_UINT16&amp;#039; since the value of &amp;#039;YYTYPE_UINT16&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YYTYPE_UINT16&amp;#039; since the value of &amp;#039;YYTYPE_UINT16&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\plugins\vcalendar\libical\libical\icalyacc.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YYTYPE_UINT16&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YYTYPE_UINT16&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalyacc.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;YYTYPE_UINT8&amp;#039; since the value of &amp;#039;YYTYPE_UINT8&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;YYTYPE_UINT8&amp;#039; since the value of &amp;#039;YYTYPE_UINT8&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\plugins\vcalendar\libical\libical\icalyacc.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;YYTYPE_UINT8&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;YYTYPE_UINT8&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalyacc.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__GNUC__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__GNUC__&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalyacc.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;short&amp;#039; since the value of &amp;#039;short&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;short&amp;#039; since the value of &amp;#039;short&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src\plugins\vcalendar\libical\libical\icalyacc.c" line="1"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;short&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;short&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\icalyacc.c" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: E - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: E - otherwise it is redundant to check it against null.">
            <location file="src\plugins\vcalendar\libical\libical\pvl.c" line="730"/>
            <location file="src\plugins\vcalendar\libical\libical\pvl.c" line="726"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;HAVE_CONFIG_H&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\pvl.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\sspm.c" line="194"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;part&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;part&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\sspm.c" line="879"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\plugins\vcalendar\libical\libical\sspm.c" line="1449"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;line_type&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;line_type&amp;#039; is assigned a value that is never used.">
            <location file="src\plugins\vcalendar\libical\libical\sspm.c" line="932"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds." verbose="Buffer is accessed out of bounds.">
            <location file="src\plugins\vcalendar\libical\libical\sspm.c" line="1235"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: new" verbose="Memory leak: new">
            <location file="src\plugins\vcalendar\libical\libical\sspm.c" line="425"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: ltype" verbose="Memory leak: ltype">
            <location file="src\plugins\vcalendar\libical\libical\sspm.c" line="460"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;DMALLOC&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;DMALLOC&amp;#039; was not checked because its code equals another one.">
            <location file="src\plugins\vcalendar\libical\libical\sspm.c" line="0"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed.">
            <location file="src\plugins\vcalendar\libical\libical\vsnprintf.c" line="155"/>
        </error>
        <error id="va_end_missing" severity="error" msg="va_list &amp;#039;ap&amp;#039; was opened but not closed by va_end()." verbose="va_list &amp;#039;ap&amp;#039; was opened but not closed by va_end().">
            <location file="src\plugins\vcalendar\libical\libical\vsnprintf.c" line="154"/>
        </error>
    </errors>
</results>
